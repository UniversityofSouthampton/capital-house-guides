{"0_GDA-Induction/0_The-Tech-Stream/0_Art-isn't-in-the-Tools":{"slug":"0_GDA-Induction/0_The-Tech-Stream/0_Art-isn't-in-the-Tools","filePath":"0_GDA Induction/0_The Tech Stream/0_Art isn't in the Tools.md","title":"Art isn't in the Tools","links":[],"tags":[],"content":"The Dilemma\nAssuming your end goal is to work in the games industry, or an adjacent creative sector, you may assume that studios and workplaces have rigid hard skill requirements (‚Äúyou must know how to use this specific games engine, you must know how to use this specific program, you must know the ins and outs of coding‚Äù) This is not entirety the case. Hard skills like that can be learned by anyone with access to YouTube and time.\nTry and change your mindset from ‚ÄúBy the end of my time at WSA I want to know how to make a game‚Äù to ‚ÄúBy the end of my time at WSA I want to be a great game-maker‚Äù. It is an important distinction that will allow you to gain most from your time here. Anyone can learn to code, but it takes knowledge (and a lot of practice) to create games that speak to people. This is less easy to learn from YouTube as it requires wider context of art, of human psychology, and a deep love for the subject that you are embuding into your work.\nToby Fox, creator of Undertale and Deltarune, began his creative journey in music, studying piano and trumpet in school. He then studied environmental science at university. He himself claims to not be a great programmer, but this has had very little to no effect on the reach of his work.\n\nPhil Fish, creator of FEZ, studied ‚ÄúDesign and Digital Art for Video Games‚Äù, a course very similar to the one you are on now. Again, he himself claimed that he ‚Äústill has little to no idea about programming‚Äù. Yet his game sold over a million copies and has become a cult classic.\n\nSince you have chosen this course, we assume that you want to become great artists.\n\n\n                  \n                  Quote\n                  \n                \n\n‚ÄúArt isn‚Äôt in the tools, material, or equipment you use. It‚Äôs in the way you see the world.‚Äù\n\n\nTools change, a lot. Especially in today‚Äôs very dynamic digital age.\nYour primary study\nBA Games Design and Art is, as the name suggests, a programme which aims to expand your knowledge and practice of design methodology and wider art context. This is the main focus of your study and is covered through your weekly lectures.\nThe programme does NOT have a requirement for game development skills, you may be coming in with a lot, a little, or no programming experience. That is ok. But you may be asking yourself:\n‚ÄúI understand all this, but I will still need to create a digital game at some point, right?!‚Äù\nCorrect, and actually this will be much sooner than you expect. In order to cater to the vast array of skills, interests, and goals, we have the GDA Tech Stream."},"0_GDA-Induction/0_The-Tech-Stream/1_What-is-The-Tech-Stream":{"slug":"0_GDA-Induction/0_The-Tech-Stream/1_What-is-The-Tech-Stream","filePath":"0_GDA Induction/0_The Tech Stream/1_What is The Tech Stream.md","title":"What is The Tech Stream","links":["0_GDA-Induction/0_The-Tech-Stream/0_Art-isn't-in-the-Tools","0_GDA-Induction/0_The-Tech-Stream/2_Technical-Sessions","0_GDA-Induction/0_The-Tech-Stream/3_Technical-Guides","0_GDA-Induction/0_The-Tech-Stream/4_Ad-hoc-Technical-Support"],"tags":[],"content":"I strongly recommend reading Art isn‚Äôt in the Tools before this page, as it provides an important preface to understanding the purpose of the tech stream.\nSupplement, not replacement\nWhatever specialty you are looking to get into, whether its Games Design, Character Art, Games Narrative, Level Design, User Experience design, etc, you will need to be familiar with INSERT INDUSTRY STANDARD TOOLS HERE. You will need to be familiar with tools that programmers and engineers use, in the same way a great game programmer would need to understand the pipelines, restrictions, and formats that an artist is involved with.\nThese hard skills are infinitely wide, and infinitely deep. It is simply impossible to cover everything. Even if it was, knowing every technical detail of game development will not guarantee that your final product is good. Don‚Äôt get me wrong, it is very, very important to know how to use your tools. But as we know, tools change.\n\n\n                  \n                  Important\n                  \n                \n\nYour technical journey is a self-directed one. You will need to - in parallel to your art studies - take responsibility to learn, explore, and experiment with any relevant tools. Be that Unity, Godot, Blender, Maya, Kirta, Aseprite, etc. The priority of what to tackle first will differ from person to person.\n\n\nLuckily, you do not have to do this alone!\nüë®‚ÄçüíªThe tech stream exists to supplement your technical learning and practice in parallel to your art study. This includes a weekly technical session, a database of guides and resources, and access to an on-site game development technician (Ross)\nTechnical Sessions\nTechnical Guides\nAd-Hoc Technical Support"},"0_GDA-Induction/0_The-Tech-Stream/2_Technical-Sessions":{"slug":"0_GDA-Induction/0_The-Tech-Stream/2_Technical-Sessions","filePath":"0_GDA Induction/0_The Tech Stream/2_Technical Sessions.md","title":"Technical Sessions","links":[],"tags":[],"content":"Each week, you will have what is broadly called a ‚ÄúTechnical Session‚Äù. A three hour slot especially dedicated to technical learning and practice. It is important to note that this is not a replacement for independent study, but is there to offer structure and guidance should you need it.\nA typical technical session will consist of:\n\nA short introduction to a particular skill, concept or demo\nTime for practice and experimentation, focusing on the weekly topic or otherwise\nOpportunity to ask questions and seek support, about the weekly topic or otherwise.\n\nFurther in the year, as goals and ambitions become clearer, sessions will be pivoted towards individual support with an opportunity to request future topics to be demonstrated.\nTimetable\nFirst Year: Thursday 13:30-16:30\nSecond Year: Thursday 10:30-12:30\nThird Year: Tuesday 10:30-12:30\nThere is a timetable of planned topics written outside of the computer suite. This is subject to change so keep an eye on the timetable and most importantly Slack for any updates.\nAttendance\nNot all highlighted topics might be relevant to all students, such you are not forced to engage with the content unless you want to. Some sessions will introduce crucial software that you will need to use for your degree, but this will be communicated to you beforehand.\nIt is a timetabled session, so attendance is taken. You are expected to be in the studio during this time, but unlike the academic sessions, you are not forced to engage with the content and may work independently in the computer suite or studio.\nCoding Help\nProgramming is a skill that is picked up at different rates and is a field where the retention of knowledge is strongly dependent on practice. This will be introduced to you gradually through other topics, and later in the year you should try and allocate some time throughout the week for practice. It may seem daunting at first, but is one of those things that you need to practice and it will become easier. Please feel free to ask for individual support at any time or if you are not sure where to start!"},"0_GDA-Induction/0_The-Tech-Stream/3_Technical-Guides":{"slug":"0_GDA-Induction/0_The-Tech-Stream/3_Technical-Guides","filePath":"0_GDA Induction/0_The Tech Stream/3_Technical Guides.md","title":"Technical Guides","links":[],"tags":[],"content":"techhub.wsagames.com/guides\n\nThese guides can help to lead you through a particular concept, or will provide external resources. More guides will be published throughout the year. Students are welcome to write their own guides in Obsidian and request for them to be added to the site.\nLinkedIn Learning\nUoS Students have unlimited access to LinkedIn Learning, a wide source of short and long courses written by the wider community. When choosing a course, make sure that it aligns with the version of the software you are using - feel free to ask if a particular course is right for the software on our machines.\nUnity Learn\nFree tutorials, courses, and guided pathways for mastering real-time 3D development skills to make video games, VR, AR, and more.\nUnity E-Books\nA collection of e-books produced by Unity. Some printed versions are available in the computer suite, please ask if you would like one of these to be printed."},"0_GDA-Induction/0_The-Tech-Stream/4_Ad-hoc-Technical-Support":{"slug":"0_GDA-Induction/0_The-Tech-Stream/4_Ad-hoc-Technical-Support","filePath":"0_GDA Induction/0_The Tech Stream/4_Ad-hoc Technical Support.md","title":"Ad-Hoc Technical Support","links":[],"tags":[],"content":"Finally, you are free to ask for any technical support or advice from your technician! This can pertain to anything, and does not have to be related to your coursework or university projects:\nRoss Popovs (Digital Games Technician)\n\nIn-Person: GDA Computer Suite\nOn Slack\nBy email: R.Popovs@soton.ac.uk\n\nInstant On-Site and Slack technical support\nFor small questions or non-urgent support, feel free to message Ross on Slack any time or ask in-person if not busy.\nLarger technical issues or concerns\nFor larger issues, please ask during the tech session or message ahead of time and we can clear some time to talk through the issue."},"0_GDA-Induction/0_The-Tech-Stream/index":{"slug":"0_GDA-Induction/0_The-Tech-Stream/index","filePath":"0_GDA Induction/0_The Tech Stream/index.md","title":"The Tech Stream","links":[],"tags":[],"content":""},"0_GDA-Induction/1_Studio/0_Policy":{"slug":"0_GDA-Induction/1_Studio/0_Policy","filePath":"0_GDA Induction/1_Studio/0_Policy.md","title":"Policy","links":["0_GDA-Induction/1_Studio/1_Studio-32"],"tags":[],"content":"Polite Notice\nA reminder that the upkeep of studios and other university spaces is a joint responsibility between all students (BA Games Design or otherwise) and staff. Please respect these spaces by keeping them clean, maintained and accessible to improve the experience of your peers and to reduce unnecessary workload on eachother:\n\n\nIf you are using a desk in Studio 32 or the Computer Suite, please clear it after use (you may use the pigeonhole cabinet in the computer suite to temporary store paper as well any unused lockers throughout the studio).\n\n\nPlease do not leave dirty plate/cups/cutlery in the studio. Kitchen items borrowed from the cafe should be returned on the same day or shortly after. You can keep personal items (such as water bottles and cups) on your desk or in a locker as long as they are clean. If there any spills or big messes, please use the cleaning supplies located in Studio 32 or let a member of staff know.\n\n\nPlease avoid using permanent markers on the studio whiteboards - compatible markers will have a ‚Äúwhiteboard‚Äù or ‚Äúdry erase‚Äù label.\n\n\nClick here for Studio 32 Notes"},"0_GDA-Induction/1_Studio/1_Studio-32":{"slug":"0_GDA-Induction/1_Studio/1_Studio-32","filePath":"0_GDA Induction/1_Studio/1_Studio 32.md","title":"Studio 32","links":[],"tags":[],"content":"Notice\nPlease be mindful of noise especially if there are classes happening in the studio. We are very happy to see that the games room is being used as a social space but this relies on mutual understanding between all students.\nIf you are using the AV system, please remember to lock it afterwards as the studio regularly has external visitors. The cabinet padlock code can be shared with Games students on request, but please do not share it externally.\nLastly, if you are borrowing any equipment from Studio 32 please remember to return it so that it can be easily found by others when needed.\nAV System Guide\n"},"0_GDA-Induction/1_Studio/2_Steam-PC":{"slug":"0_GDA-Induction/1_Studio/2_Steam-PC","filePath":"0_GDA Induction/1_Studio/2_Steam PC.md","title":"Steam PC","links":[],"tags":[],"content":"Here at GDA we have a dedicated Alienware machine (The Bastion) that you can login to at any time to play/test games. Steam is currently installed on the PC, please let me know if you want any additional software.\nCurrent PC Location: Third Year Room\nWSA Games Account\nTo access the WSA Steam account, log in to the computer using the following shared account:\nusername : wsagames\npassword : *Q@WbPxr\nIf there are any games which are relevant to your project for research purposes, submit a request here\nIf you want to access games through your own steam account, you can do so by logging into the computer with your personal details and then logging into Steam manually."},"0_GDA-Induction/1_Studio/index":{"slug":"0_GDA-Induction/1_Studio/index","filePath":"0_GDA Induction/1_Studio/index.md","title":"Studio","links":[],"tags":[],"content":""},"0_GDA-Induction/2_Tools/0_Obsidian-ePortfolio":{"slug":"0_GDA-Induction/2_Tools/0_Obsidian-ePortfolio","filePath":"0_GDA Induction/2_Tools/0_Obsidian ePortfolio.md","title":"Obsidian ePortfolio","links":[],"tags":[],"content":"\n\n                  \n                  First Year Only \n                  \n                \n\nThis guide applies to first year students only.\n\n\nYour ePortfolio\nTo enable staff to provide feedback on your work and development towards The 7 Proficiencies, you will keep a regularly updated ePortfolio of work to be able to show to staff as you progress. This would be updated once a week as a minimum but likely you will be updating it daily with your reflections and at key point development plans. Staff will want to see this progress and will document feedback into your ePortfolio as text or rich media feedback and advice on how to improve to ensure you are on track. You will have specific moments of direct feedback for development which should also be kept or noted in your ePortfolio, alongside informal staff interactions.\nStaff will either provide you text/rich media feedback to add to your ePortfolio or they may ask you to document verbal feedback during a conversation with staff. You may be given additional feedback when talking to staff in their designated drop-in office hours or conversations outside of the studios with your PAT (Mentor).\nYou will capture your work as an ePortfolio in the free software tool Obsidian. In Obsidian your work is inside what they call a ‚ÄúVault,‚Äù At the start of your study you will be given a Vault template to structure your ePortfolio work, this will divide the portfolio into Weeks.\nObsidian\nUnder the cover, your ePortfolio is just a folder filled with other folders and ‚ÄòMarkdown‚Äô or ‚Äò.md‚Äô files. These files are quite simple, and allow you to easily organize text, create headings and subheading, or embed files. Fun fact, this guides page is written in Markdown!\nObsidian is a free editor that allows you to easily write and edit these markdown files.\nYou can download it here: obsidian.md/download\nGit and Version Control\nYou will be using Git to backup your files and create a history of the changes in your portfolio.\nThis is a practice called Version Control, widely used in industry and will be crucial when you start creating other digital projects.\nSetting up your ePortfolio on your machine\n\n\n                  \n                  Notice \n                  \n                \n\nThe following steps can get quite technical. It is important to complete these steps but if you feel lost or are concerned that some things might not be working correctly, please do not hesitate to ask for help!\n\n\nMiddle-click any links to open them in a new tab\n\n\nBefore continuing, make sure that you have downloaded and installed the following software:\n\nObsidian\nGithub Desktop\n\n\n\n\n\nHead to git.soton.ac.uk/gamesdesignart\n\nLogin (top right corner of the page)\nLogin using your university username and password\nYou will now be able to request to join the GDA group on GitLab\n\n\n\n\n\nHead to git.soton.ac.uk/gamesdesignart/portfolio-template\n\n\n\nClick ‚ÄúFork‚Äù, you should now see this screen\n\n\nSet the project name to (your username)-portfolio (eg. rp1y23-portfolio)\nSet the namespace to gamesdesignart/portfolio\nUpdate the project slug to match the project name\nKeep the branches option as ‚ÄúAll branches‚Äù\nSet the visibility level to ‚ÄúPrivate‚Äù\nThen click ‚ÄúFork Project‚Äù\nWhat did we just do? ‚ÄúForking‚Äù a git project creates your own identical copy that you can add changes to without overwriting the original. You have just created a copy of the template portfolio and renamed it. Unlike the template, this copy is private - meaning that unless you explicitly grant access to others, only you and staff can see that it exists or view its contents.\nYou only need to do this forking process once!\n\n\n\n\n\nYou should now see this screen - this is your own personal portfolio (currently a carbon copy of the template)\n\n\nYou can not edit your portfolio directly on GitLab, instead what we need to do is ‚Äúclone‚Äù your portfolio onto your computer. (In git, ‚Äúcloning‚Äù can be thought as downloading the files)\nOpen up the ‚ÄúCode‚Äù dropdown and copy the URL from the ‚ÄúClone with HTTPS‚Äù field\n\n\n\n\n\nNow open up the GitHub Desktop app. GitHub Desktop is a free program that allows you to easily ‚Äúclone‚Äù (download) git projects onto your computer and manage it. Despite it‚Äôs name, GitHub Desktop also works with GitLab.\n\nYou may be asked to sign in to GitHub, skip this stage.\nWhen asked to set a signature, set it to your university email address.\n\n\n\n\n\nOnce you have opened GitHub Desktop, on the program navigate to ‚ÄúFile‚Äù then ‚ÄúClone Repository‚Äù to open up this screen:\n\n\nSelect the ‚ÄúURL‚Äù tab\nPaste the URL that you copied from GitLab\nLocal Path specifies where on your computer you want to clone the files.\n\nIf you have OneDrive installed, it is recommended to clone into your university OneDrive folder under Documents\nOtherwise, select your ordinary ‚ÄúDocuments‚Äù folder, or somewhere where you will be able to find the files later and would not accidently delete them\n\n\nClick ‚ÄúClone‚Äù\n\n\n\n\n\nYou will likely see this pop-up show up, do not worry - you haven‚Äôt done anything wrong!\n\n\nAs you set your portfolio to ‚ÄúPrivate‚Äù, GitLab will not allow any software to access your files without authentication.\nEnter your university username and password and click ‚ÄúOk‚Äù.\nWait for the cloning to complete\n\n\n\n\n\nIf you see this, you have done everything correctly up to this point!\n\nYou have successfully cloned your portfolio onto the computer. We can now open the portfolio in Obsidian and start editing!\n\n\n\nOpen the Obsidian program. You should see this window:\n\n\nYou will want to open the files that you downloaded as a folder in Obsidian\nClick ‚ÄúOpen‚Äù\nThis part is important:\nSelect the exact folder of files that you cloned in step 7.\n\nClick ‚ÄúTrust author and enable plugins‚Äù\nCongratulations - you now have your own personal portfolio that you can edit:\n\n\n\n\n\n\nRemember that the whole point of using git and GitHub Desktop is that you can save your changes at any point. Lets try this out! As an example, navigate to Portfolio - Semester One/Week 1/Games Design &amp; Culture - P1, and make some changes at the bottom!\n\nYou changes should (hopefully) be more insightful than this.\n\n\n\nOpen GitHub Desktop again, you will see a list of all the changes that you made!\n\n\nYou will see a list of ALL the changes to files on the left - there may be more than you expect! Git tracks all of the files in the folder, even ones that you may not see! Sometimes a program can change a number of files in the background, this is ok.\nImportantly, note the change to the file that we specifically made - you can see the lines that we added in green!\n\n\n\n\n\nIn the bottom left, write a short summary of the changes that you‚Äôve made (if you want to explain your changes in more detail, you can also provide a description)\n\n\nYour summary and description should (hopefully) be more insightful than this, such as ‚ÄúCompleted Week 1 reflection of field trip‚Äù or ‚ÄúAdded a section based on research.‚Äù\nYour summary and description are seen by staff and will be useful when reviewing your progress and engagement.\nWhen you are happy with your changes, and you have written the summary and description, click ‚ÄúCommit‚Äù!\n\n\n\n\n\n                  \n                  Your first Git Commit! \n                  \n                \n\nYou have just completed what is called a ‚Äúgit commit‚Äù - a number of changes that have been packaged together. The real advantage of git comes from this, as you are able to see a history of your commits, and more importantly, you are able to reroll your portfolio back to any commit, should you really regret adding something or if you mess up your portfolio.\nThis is why it is important to create commits regularly!\n\n\n\n\n\nFinal Step! Creating a commit on GitHub Desktop only creates the commit on your machine. If you want the commit to be seen by staff, you will need to ‚ÄúPush‚Äù any commits that you have made. You can think of ‚Äúpushing‚Äù as ‚Äúuploading‚Äù your commits back to GitLab.\n\n\nTo do this, simply click on the ‚ÄúPush origin‚Äù button on the top of GitHub Desktop.\nYou may need to provide your university username and password.\n\n\n\nCongratulations! You have successfully cloned the portfolio template, made changes to it, then committed and pushed your changes back!\nIf you are using a university PC, you will only need to repeat steps 6 onwards.\n\nNote from writer:\nI understand this system can seem very daunting and technical. Unfortunately, git is incredibly important and is widely used in industry. When you start developing games, you will need to use git to track changes to your project and collaborate with others. It can be confusing when you first start, but over time this process will become like second nature. We wanted to introduce you to git as early as possible so that you have time to become accustomed with it. Do not feel discouraged if this seems difficult, it is admittedly very technical, but hopefully will become easier over time.\nDo not feel discouraged to ask for help at any point!"},"0_GDA-Induction/2_Tools/1_WordPress-Basics":{"slug":"0_GDA-Induction/2_Tools/1_WordPress-Basics","filePath":"0_GDA Induction/2_Tools/1_WordPress Basics.md","title":"WordPress Basics","links":[],"tags":[],"content":"\n\n                  \n                  Second and Third Year Only \n                  \n                \n\nThis guide applies to second and third year students only.\n\n\nWhat is WordPress?\nWordPress is a free, open-source content management system that allows users to create and manage websites and blogs without needing programming skills. Over 40% of the internet is built on WordPress because it allows anyone to configure a website or blog with hundreds of themes and plugins to choose from.\nWe at GDA have chosen to use WordPress as the platform of choice for student blogs and portfolios. All second year students are provided with their own personal wordpress site that they should use to document their work throughout the year through a series of organized weekly blog posts. In third year, students have a choice between continuing with their existing site, or starting a new one specifically for third year content. Students may request a new site at any moment, for example for group projects.\n\nWordPress at GDA\nsites.wsagames.com\nsites.wsagames.com/ exists as both a host and an index for student sites. Your site will be hosted on this domain and is usually accessible by appending your username to the end of the URL. For example if your username is ab15g23, your site will be live on sites.wsagames.com/ab15g23/\nThird Year Projects\nStudents may request a new site at any moment, for example for group projects.\nThe only exception to this rule applies to Final Year Projects, where your site will be hosted separately under a unique domain (you can find examples of Final Year Project websites here: wsagames.com/). You will be walked through the process of purchasing and setting up your own domain as part of your Third Year marketing lectures.\n\nSetting up your WordPress site\nYou would have been provided a WordPress username and password over email, please check with your technician if you are unsure or would like your password to be reset.\nIn order to login to your site, append /wp-admin to the end of the URL. For example, if your site is located at sites.wsagames.com/ab15g23/, going to sites.wsagames.com/ab15g23/wp-admin will take you to the admin dashboard. You will need to use your username and password to log in.\nAdmin Dashboard\n\nOnce logged in, you will be greeted with admin dashboard. Most of the settings and backend tools for your site will be available through this page.\nSetting up your profile\nIf you are accessing WordPress for the first time, it is recommended for you to take a moment to set up your profile before continuing.\nHover over the &quot;Users&quot; tab on the left, and then click on &quot;Profile&quot;\n\n\n                  \n                  Important \n                  \n                \n\nThe password that you were given is a temporary one. It is strongly recommended for you to change your password.\n\n\nProfile photos are handled by Gravatar - an external service not related to Wordpress or GDA. If you choose to set up a Gravatar account you will need to use your student email in order for it to be synced with your Wordpress account. It may take some time to update and should be used at your own discretion as Gravatar may display the photo on any other site that uses Gravatar. For this reason we advise against using your real-life likeness.\nWhen you are done, don‚Äôt forget to click the ‚ÄúUpdate Profile‚Äù button to save your changes!\nChanging your site title and icon\nBy default the site title is set as your name, if you would like to change this hover over the &quot;Settings&quot; tab and select &quot;General‚Äù:\n\nThe icon should be a square and at least 512 x 512 pixels in size.\nAgain, don‚Äôt forget to click the ‚ÄúSave Changes‚Äù button when done!\nSetting up your categories\nBefore you begin writing your posts, it is recommended for you to think about how you want your posts to be organized. Categories are a great way of doing this, and will allow for you to easily separate your content into specific menus and sections of your site.\nFor GDA, we recommend creating categories for each aspect of your study. Categories can be nested, allowing for you to define a clear structure for your content. For example:\n\nYear 2\n\nSemester 1\n\nGame Design Document\n\nGame Overview\nPlayer Experience\nCore Gameplay\netc.\n\n\nResearch\nWeekly Updates\nPersonal Development\n\n\nSemester 2\n\n‚Ä¶\n\n\n\n\nYear 3\n\nSemester 1\n\n‚Ä¶\n\n\nSemester 2\n\n‚Ä¶\n\n\n\n\n\n\n\n                  \n                  NOTE\n                  \n                \n\nThird year students who decide to continue with their sites should have a CLEAR separation between their second and third year content.\n\n\nTo setup new categories, hover over the &quot;Posts&quot; tab and select &quot;Categories&quot;:\n\nOn the left you will see the form used for creating new categories. On the right you will see any existing categories already made. By default all WordPress sites come with an ‚ÄúUncategorized‚Äù category that posts are placed under if no category is specified - this category can not be deleted.\nCreate any parent categories first, then any sub-categories after.\nSlugs\nBelieve it or not, slug is a technical term for the human-readable part of a URL which identifies a certain page or a section of your site. For example, in www.example.com/how-to-bake-bread, how-to-bake-bread would be the slug that identifies that specific page. If your post is under a category, the category‚Äôs slug will be part of the URL that points to your post.\nPosts and Pages\nPosts vs Pages\nWordpress content comes in two flavors, but what is the difference between the two?\nThis Blog by Elementor describes the differences in detail:\nHierarchical vs. Static\n\nPosts: Posts are hierarchical in nature. They are presented in reverse chronological order, with the newest content appearing first.\nPages: Pages can also be hierarchical, allowing for nested parent-child relationships. However, the primary focus is on creating a clear navigational structure for your website.\n\nOrganization\n\nPosts: Organized primarily using categories and tags, facilitating content discovery based on topics and keywords.\nPages: Organized within menus (top navigation, sidebar, footer menus) to guide visitors through essential website sections.\n\nTimeliness\n\nPosts: Designed for timely content with a focus on recency due to their publication dates.\nPages: Built for content that doesn‚Äôt rely on a specific publication date and remains relevant over time.\n"},"0_GDA-Induction/2_Tools/index":{"slug":"0_GDA-Induction/2_Tools/index","filePath":"0_GDA Induction/2_Tools/index.md","title":"Tools","links":[],"tags":[],"content":""},"0_GDA-Induction/index":{"slug":"0_GDA-Induction/index","filePath":"0_GDA Induction/index.md","title":"GDA Induction","links":[],"tags":[],"content":""},"1_Unity/0_Introduction/0_Your-First-Project":{"slug":"1_Unity/0_Introduction/0_Your-First-Project","filePath":"1_Unity/0_Introduction/0_Your First Project.md","title":"Your First Project","links":[],"tags":["2d","introduction","scripting","unity"],"content":"üñ•Ô∏èLab Note\nTest Commit\nThis guide can be followed while using the GDA Computer Suite. Sections which are unique to the computer suite are marked with the üñ•Ô∏èemoji\n\nWhy Unity?\n\n\nLarge and active community of professionals and hobbyists\n\n\nUsed widely in many creative industry\n\n\nCross-platform development\n\n\nRich 2D and 3D capabilities\n\n\nReal-time experiences for AR, VR, mobile, desktop and web (Not limited to just games!)\n\n\nContinuous updates with LTS (Long Term Support) versions\n\n\nFree for students and personal use!\n\n\nLaunching Unity\nüñ•Ô∏è The lab PCs are pre-installed with Unity 2022.3.34f\n\n\nIf you‚Äôre using a later version (Unity 6 or above), your interface may differ from this guide but the content will still be relevant.\n\n\nType ‚ÄúUnity‚Äù into the Windows search box\n\n\nüñ•Ô∏è` Important if using the Computer Lab: Click on ‚ÄúUnity 2022.3.34f1‚Äù not ‚ÄúUnity Hub‚Äù. This will still open the Unity Hub launcher, but will preload the editor into the launcher for you.**\n\n\nOnce open, Unity Hub will ask you to sign in. If you don‚Äôt have an account, create one with your student email.\n\n\nCreating your first project\n\n\nCreate a new Unity project through Unity Hub\n\n\n\n\nChoose the Universal 3D template\n\n\nSet your project name\n\n\nüñ•Ô∏èComputer Suite: Save the project to the D drive\n\n\nLeave ‚ÄúConnect to Unity Cloud‚Äù checked\n\n\nLeave ‚ÄúUse Unity Version Control‚Äù unchecked - this is separate to Git Version Control and may cause confusion between the two\n\n\nBuilt-in Renderer/ URP/ HDRP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilt-In Renderer  - General Purpose + Legacy  - This project type is being phased outUniversal Render Pipeline (URP)  - Modern go-to option  - Artist-friendly features  - Best for cross-platform  - Best for most cases and is the recommended option for most projectsHigh Definition Render Pipeline (HDRP)  - Advanced graphical features intended for high-end hardware  - Difficult to fully utilise  - Ask if you need this for your project\nSetting Up Version Control\nIn order to save and track changes to your project so that it can be accessed by you and your teammates from any machine, it is highly recommended to set up Git version control for your project.\nIn Unity\n\nHierarchy: Displays all the game objects in the current scene. Here you can manage the organization of objects. By default your project will have a Camera, a Light, and a ‚ÄúGlobal Volume‚Äù used for post processing effects.\nScene: A visual representation of the game world. This is where you can move, manipulate, and arrange objects in a 3D or 2D space.\nInspector: Shows detailed properties and settings for the currently selected game object, component, or asset. You can modify values like position, rotation, and script variables here.\nProject/Console: Use the tab to change between these two windows.\nThe Project window contains all the assets, scripts, and resources for your project. It‚Äôs organized into folders and allows you to manage the project‚Äôs files.\nThe Console window will show you any errors/warnings in your project as well as any custom messages you wish to output here.\nScenes\nScene: A space that holds all of the Game Objects needed for your game. A small game could only need one scene for the whole thing, while a bigger game might need one scene for every level or environment.\n\n\nFor example, in a more complex project you can use scenes to organize your game by content:\n- [Main Menu Scene]\n- [Level 1 Scene]\n- [Level 2 Scene]\n- The scenes don‚Äôt have to be sequential, for instance you could have [Hub World], [Building 1], [Building 2], [Settings Menu] as separate scenes.\n\n\nScenes are essential for organization, performance, and robustness!\n\n\nFor most purposes, you will only have one scene loaded in your game at a time.\n\n\nWhen you ‚Äòsave‚Äô your Unity project, you are saving the currently loaded scene.\n\n\nWhen you first load a project, Unity will create a new scene titled ‚ÄúSampleScene.‚Äù You can find it within the Project panel under Assets/Scenes:\n\nIt is a good idea to rename this scene. You can name it anything as long as it roughly describes the intended contents of the scene. We will be implementing a basic First Person Controller here, so name it ‚ÄúFirstPersonTesting‚Äù for now.\nGameObjects and Components\n\n\nGameObjects: Fundamental objects within Unity\nA scene can have an unlimited number of GameObjects, representing anything and everything in your scene from your player; to props or weapons; to a terrain or building. Anything in your scene will be a GameObject.\nA GameObject can have a mesh attached to it or be invisible.\n\nGameObjects don‚Äôt have any inherent functionality by themselves, but can be extended through the use of Components and Scripts.\nA GameObject doesn‚Äôt have to be something physical within your scene. For example we can use invisible GameObjects to hold scripts that run in the background.\n\n\n\nUnity has hundreds of built-in Components, but in many cases we will need to write our own Components in the form of C# Scripts.\n\n\nCreating your first GameObject\n\nLets create a new GameObject which will represent our player.\nCreate a new capsule object by right-clicking within the Hierarchy window and select\n3D Object ‚Üí Capsule\n\n\nInspector Window\n\n\n\nSelect the Capsule by clicking on it in the \u000bHierarchy. You will see that it becomes highlighted\n\n\nThe top of the inspector window allows you to activate/deactivate your object, rename it, as we all more advanced options which we will skip for now.\n\n\nThis is followed by the object‚Äôs components. On our capsule, by default these are:\n\n\nTransform:\u000b All GameObjects include a Transform component. This defines the position, rotation, and scale of the\u000b object\n\n\nMesh Filter: Defines the mesh (3D model) for the object.\n\n\nMesh Renderer: Renderers the mesh defined by the Mesh Filter\n\n\nCapsule Collider: Provides a collision mesh for the capsule. The collider is used to give objects physical interactivity within Unity‚Äôs Physics system\n\n\nMaterial: The material for the object. The default material can not be edited but a new material can be created and dragged here to replace it.\n\n\n\n\nFinally at the bottom you will find the ‚ÄúAdd Component‚Äù button. Use it to browse the catalogue of Unity‚Äôs built-in components. Any user-made scripts will also be available here. Note that not all components are compatible with each other and some components can only be added once per object.\n\n\nUse the inspector to set the position of the Capsule to X: 0, Y: 5, Z: 0\n\nProperties\n\n\nWe can interact with components and scripts through properties.\n\n\nEach component/script has its own set of properties which can be edited\n\n\n\nIf you are ever unsure what a property does, just hover over it!\nTip: Googling ‚ÄúUnity Capsule Collider‚Äù or any other Component name will often give you the \u000bdocumentation page for the component as one of \u000bthe first results.\u000b\u000b Don‚Äôt worry about the details for now though!\nRecap of Structure\nflowchart LR\n\n¬† ¬† A[Unity Project] &lt;--&gt; B[Scenes]\n\n¬† ¬† B &lt;--&gt; C[GameObjects]\n\n¬† ¬† C &lt;--&gt; D[Components]\n\n¬† ¬† C &lt;--&gt; E[Scripts]\n\n¬† ¬† D &lt;--&gt; F[Properties]\n\n¬† ¬† E &lt;--&gt; F\n\n\n\nA Unity Project can have any number of Scenes\n\n\nA scene can have any number of GameObjects\n\n\nA GameObject will always have Transform and Material components, as well any number of other built-in components or Scripts\n\n\nComponents and scripts will have properties which you can manipulate\n\n\nPlay Mode\n\nPlay Mode is a core feature in Unity that lets you test your game directly in the editor. Think of it as a ‚Äúpreview‚Äù of your game that you can run at any time. You can find the play mode controls at the top of the Unity editor.\nWhen you enter Play Mode:\n\nUnity compiles your scripts, turning them into internal code for Unity to run.\nThe editor interface changes (often with a colored tint to remind you you‚Äôre in Play Mode)\nThe ‚ÄúGame‚Äù tab opens and your game starts running from the active scene\nAny changes in Play Mode will be reverted once you exit it\n\nTo exit Play Mode, just click the Play button again, and Unity will return to its normal editing state.\nPlay Mode is essential for game development because it offers rapid iteration - you can make changes, test them immediately, and refine your game without the time-consuming process of building (turning it into an application) every time.\nPhysics\nUnity has a powerful physics engine, handling simulation of physical interactions in your game world. This includes but is not limited to:\n\n\nRigid body dynamics: Controls how solid objects move, rotate, and interact when forces are applied\n\n\nObject movement and collisions: Detects when objects bump into each other and calculates appropriate responses\n\n\nGravity and forces: Applies gravitational pull and lets you add custom forces like wind, explosions, or magnetism\n\n\nMaterial properties: Manages how objects bounce, slide, and interact through friction, bounciness, and density\n\n\nJoints and constraints: Connects objects together with hinges, springs, or fixed connections\n\n\nRagdoll effects: Simulates lifelike character movements when they fall or get hit\n\n\nRaycasting: Shoots invisible lines to detect objects in specific directions (useful for line-of-sight checks or targeting)\n\n\nTriggers: Special collision areas that detect when objects enter but don‚Äôt physically block them\n\n\n\n\n\n\n\n\n\n\n\nRigidbody Dynamics\nIn real-world physics, a rigid body is any physical body that does not deform or change shape under physical forces.\nTo simulate physics-based behavior such as movement, gravity, collision, and joints, you need to configure objects in your scene as rigid bodies. For them to interact with other objects they also need a collider.\nLet‚Äôs test this by creating a new Cube. Right click in the hierarchy and select 3D Object ‚Üí Cube.\nSet its position to X: 0, Y: 5, Z:2.\nAdd a Rigidbody component to the Cube by selecting it and scrolling down in the inspector. Click ‚ÄúAdd Component‚Äù. This will open up the component catalogue where you can either type in ‚ÄúRigidbody‚Äù or find it under the Physics section.\n\nAdding a second physics object (Floor)\nLets a floor to our scene! Right click in the Hierarchy Panel and select 3D Object ‚Üí Plane.\nSet the position to X: 0, Y: 0, Z: 0\nYour scene should look like this. Enter Play Mode and you will see the Cube is affected by gravity! However the capsule is not, as it does not have a rigidbody. Do not add one to the capsule yet, as for the process for characters is slightly different!\nYou should now be familiar with the basic structure of Unity and have a rough idea of how to create an object affected by physics."},"1_Unity/0_Introduction/1_Glossary":{"slug":"1_Unity/0_Introduction/1_Glossary","filePath":"1_Unity/0_Introduction/1_Glossary.md","title":"Glossary","links":[],"tags":["scripting","unity"],"content":"Note: This is a student-submitted guide. Please comment or get in touch with me (Parker) for suggestions or clarification!\nEditor Terms\n\n\n\nScene - A space that holds all of the Game Objects needed for your game. A small game could only need one scene for the whole thing, while a bigger game might need one scene for every level or environment. When you edit in Unity you will be editing a Scene asset.\n\n\nComponents - The ‚Äúbuilding blocks‚Äù of any Game Object that change properties or functionality.\n\nComponents can be things like meshes, materials, Rigidbody components that give them mass and physics, colliders, etc.\n\n\n\nGame Objects - The fundamental objects within Unity.\n\nGame Objects represent props, characters, scenery. Can have a model or be empty.\n\n\n\nScripts - Components comprised of a collection of C# code that let you add functionality to any object, or change its behavior.\n\nA script can be given to any object to give it that functionality. For example, a player character could have a Movement script, or an NPC could have an AI script.\n\n\n\nC# &amp; Scripting\n\n\nClass - A block of code that contains Variables and Functions.\n\nOne class can inherit from another, which means it gets all its variables and functions by default. For example, all scripts you create inherit the ‚ÄòMonoBehavior‚Äô class, which contains all the variables and functions needed to make a Unity game script.\n\n\n\nVariable - A piece of data given a name as a signifier. In C# it is declared, or created, by stating its Data Type and Scope.\n\n\n\nYou do not need to assign a value right away when declaring a variable, but the data type is necessary. If you do not assign the scope it is assumed to be private, but you should do it anyway so it‚Äôs clear in your code.\n\n\nVariables don‚Äôt have to just be data, they can also refer to certain Game Objects in Unity.\n\n\n\n\nData Type - Specifies what type of data a variable is, which decides how it is processed by the engine and what processes are allowed to be performed on it. C# does not have a single data type for ‚Äúnumbers‚Äù in general for instance, it gets a bit more specific than that. Common data types in Unity include:\n\n\nString - A string of Unicode characters, like a word or a sentence.\n\nExample: ‚Äúhello‚Äù, ‚Äúworld‚Äù, ‚Äúhello world‚Äù\n\n\n\nInteger (or Int) - A whole number.\n\nExample: 1, 28, 200\n\n\n\nFloat - A decimal number. It can store whole numbers too. You usually want to use floats for numbers.\n\nExample: 3.78, 5.89, 356\n\n\n\nDouble - Like a float, but has room for bigger numbers, or more decimal places for higher precision. Only use it when you need it, float will work in most cases.\n\nExample: 5.9999999999999\n\n\n\nBoolean (or Bool) - A value that can only be ‚Äútrue‚Äù or ‚Äúfalse‚Äù.\n\nExample: true, false\n\n\n\nVector2 - A vector made up of two float numbers. Usually describes position or rotation in 2D space, but it has a lot of different use cases.\n\nExample: (1.3, 2.6)\n\n\n\nVector3 - Like Vector2 but with 3 numbers. Usually used for position or rotation in 3D space.\n\nExample: (1.3, 2.6, 5.2)\n\n\n\n\n\nData Scope - The area of code within which a variable can be used in.\n\n\nPrivate - Can only be used within the class it is declared in.\n\n\nPublic - Can be used by any script. Try to avoid making everything public if you don‚Äôt need to, as if any variable can be accessed and edited from anywhere else in your game it can lead to bugs that are very tricky to diagnose. Keeping all scripts as self-contained as possible helps you out in the long run.\n\n\n\n\nFunctions - A collection of code that is given a name as a signifier. When this name is called in your script, or by other scripts, the code will be run. Also known as ‚Äúmethods‚Äù.\n\n\nFor example, here is a function that returns whatever the input number plus one whenever it is called.\n\n\n\n\n\nFunctions can optionally take in data as an input. This is stored as a variable inside the function and the name and type of the input is declared when making the function.\n\n\nFunctions can also return the value of a variable if need be. The type of the variable is set when the function is declared.\n\n\nFunctions also have a scope from which they can be called, just like variables.\n\n\n\n"},"1_Unity/0_Introduction/2_First-Person-Controller":{"slug":"1_Unity/0_Introduction/2_First-Person-Controller","filePath":"1_Unity/0_Introduction/2_First Person Controller.md","title":"First Person Controller","links":[],"tags":["2d","introduction","scripting","unity"],"content":"Creating a simple First Person Controller\nLearning any application is best done through practice! To really solidify the above concepts, lets create a very basic First Person Controller. This will also introduce you to basic scripting!\nDecomposing the task\nGoing from nothing to a fully controllable character seems like a daunting task, so let‚Äôs break it down! When it comes to implementing any feature its a good idea to decompose it into smaller tasks. So what is involved in making a first-person controller?\nParenting Objects (Create First-Person Camera)\nIn your scene you will a GameObject named ‚ÄúMain Camera‚Äù by default. This object contains a Camera component and the output of the camera is displayed when you enter Play Mode.\nCurrently the camera probably exists outside of the player, and for a first-person controller we want the camera to be from the perspective of the player‚Äôs eyes. To do this we need to make the camera gameobject a ‚ÄúChild‚Äù of the player.\nBy making an object a child of another object it becomes ‚Äúattached‚Äù and any transformations on the parent are subsequently applied to the child.\nTo make the ‚ÄúMain Camera‚Äù object a child of the ‚ÄúCapsule‚Äù object, simply drag it over in the hierarchy.\nSet the position of the camera object to X: 0, Y: 0.5, Z: 0. Notice how now that the camera is a child of the capsule, its position is relative to the capsule. By setting the position to those values, the camera is 0.5 units above the center of the capsule, or roughly at eye-level.\nEnter Play Mode - you are now seeing the ‚ÄúFirst Person View‚Äù of the capsule! Not much is visible yet. As the camera is inside the capsule, the capsule itself is not visible but this okay and is what we want.\nMoving the Capsule Player\nWhats next? Well we probably want to be able to move the capsule (ie our player) using the keyboard\nCharacter Controller Component\nThe reason we didn‚Äôt add a rigidbody to our player was because Unity offers a special component - the Character Controller - which acts as a rigidbody and collider in one, with special behavior designed specifically for controlling a character in a 3D environment.\nWhy use a Character Controller and not a Rigidbody for a player?\nMost games don‚Äôt treat players as realistic objects, and actually the way that we expect our character to move isn‚Äôt exactly super realistic. Unity describes this best:\n\nThe traditional Doom-style first person controls are not physically realistic. The character runs 90 miles per hour, comes to a halt immediately and turns on a dime. Because it is so unrealistic, use of Rigidbodies and physics to create this behavior is impractical and will feel wrong. The solution is the specialized Character Controller. It is simply a capsule shaped Collider which can be told to move in some direction from a script. The Controller will then carry out the movement but be constrained by collisions. It will slide along walls, walk up stairs (if they are lower than the Step Offset) and walk on slopes within the Slope Limit.\n\nThat‚Äôs not to say using a Rigidbody, or any method is incorrect. It all depends on how you want your movement to function and feel. For a physics-based platformer for example, you would want to use a rigidbody and let Unity handle all the work. For a parkour game, you may use a Character Controller but define and handle all of the physics manually through a script (giving you explicit control of how player velocity is calculate, for example).\nEach approach has its own pros and cons, but we will be using CharacterController for this guide as it is robust and gives you more control over the movement of the player.\nRemove the Capsule Collider on your player and add a Character Controller component. The inspector for your player should look like this:\nUsing the Character Controller (Your first Script)\nTo use the character controller component, we will need to create our own script. This guide assumes basic programming knowledge. Don‚Äôt worry if you don‚Äôt have this, as all code is provided and explained.\nSet Up Your Scripting Environment\n\n\nWithin your Assets folder, create a new folder \u000bfor Scripts\n\n\nSelect your default Script Editor\n\n\nAt the top of the screen, go to Edit ‚Üí Preferences\n\n\nSelect the External Tools tab\n\n\nSet your External Script Editor to ‚ÄòRider‚Äô\n\n\nDon‚Äôt change any other settings at this moment\n\n\n\n\n\nCreate a script\n\n\nTime to create your own script!\n\n\nWithin your Scripts folder, create a new script by right-clicking and selecting Create ‚Üí C# Script\n\n\nName your Script ‚ÄúBasicMovement‚Äù (no spaces):\n\n\n\n\n\nConvention recommends pascal case for script names\n\nE.g. PlayerController, CameraEffectsSystem, LevelOneProperties\n\n\n\nAdd your script to your capsule (same way you would add a component)\n\n\nThen double-click the script to open it within Rider (a C# script editor)\n\n\nIn Rider\nYou should now see this. What you are looking at is default code which unity generates any time you create a new script:\n\nNotice the two functions Start() and Update(), don‚Äôt worry about anything else for now. All you need to know is that you can write code within those functions (between the curly brackets below each respective function).\nCode that you write within Start() will only run once, when you enter Play Mode.\nCode that you write within Update() will run every frame (hundreds of times per second)\n\nInteracting with the Character Controller Component\nIn order for our script to interact with the Character Controller component, we need to create a reference to it within our script:\nC#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BasicMovement : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        \n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        var characterController = GetComponent&lt;CharacterController&gt;();\n    }\n}\n\nWe can get a reference to any component on the same object as the script using using GetComponent&lt;&gt;(). On line 16 we use this to save the reference in a variable called characterController.\nAdding Movement\nBy default, the Character Controller does not handle gravity. If we want our player to be affected by a gravity, we have to ‚Äòactivate it‚Äô by triggering a move.\nC#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BasicMovement : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        \n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        var characterController = GetComponent&lt;CharacterController&gt;();\n        var velocity = transform.forward;\n        characterController.SimpleMove(transform.forward);\n    }\n}\n\nThe above code makes the character move forward. Each time we use SimpleMove() the component also applies gravity.\nLets add a check for input so we only move the player forward when the W key is pressed:\nC#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BasicMovement : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        \n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        var characterController = GetComponent&lt;CharacterController&gt;();\n        var velocity = Vector3.zero;\n        \n        if(Input.GetKey(KeyCode.W))\n        {\n            velocity += transform.forward;\n        }\n        \n        characterController.SimpleMove(velocity);\n    }\n}\n\nEach frame, the velocity is reset to zero. If W is pressed, we are adding the forward direction to the velocity.\nRepeat for the other directions:\nC#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BasicMovement : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        \n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        var characterController = GetComponent&lt;CharacterController&gt;();\n        var velocity = Vector3.zero;\n        \n        if(Input.GetKey(KeyCode.W))\n        {\n            velocity += transform.forward;\n        }\n        if (Input.GetKey(KeyCode.S))\n        {\n            velocity -= transform.forward;\n            //to add &quot;backwards&quot; we subtract &quot;forwards&quot;\n        }\n        if (Input.GetKey(KeyCode.D))\n        {\n            velocity += transform.right;\n        }\n        if (Input.GetKey(KeyCode.A))\n        {\n            velocity -= transform.right;\n            //to add &quot;left&quot; with subtract &quot;right&quot;\n        }\n        \n        characterController.SimpleMove(velocity.normalized);\n    }\n}\n\nYou might notice that when moving diagonally the player moves faster. To fix this we replace velocity with velocity.normalized on line 39. Learn why this works\nLets add a new speed property to our script:\nC#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BasicMovement : MonoBehaviour\n{\n\n\t\tpublic float speed;\n\t\t\n    // Start is called before the first frame update\n    void Start()\n    {\n        \n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        var characterController = GetComponent&lt;CharacterController&gt;();\n        var velocity = Vector3.zero;\n        \n        if(Input.GetKey(KeyCode.W))\n        {\n            velocity += transform.forward;\n        }\n        if (Input.GetKey(KeyCode.S))\n        {\n            velocity -= transform.forward;\n            //to add &quot;backwards&quot; we subtract &quot;forwards&quot;\n        }\n        if (Input.GetKey(KeyCode.D))\n        {\n            velocity += transform.right;\n        }\n        if (Input.GetKey(KeyCode.A))\n        {\n            velocity -= transform.right;\n            //to add &quot;left&quot; with subtract &quot;right&quot;\n        }\n        \n        characterController.SimpleMove(velocity.normalized*speed);\n    }\n}\n\nWe can create a new property for our script by creating a public variable outside of a function (usually at the top of the script)\n\nYou are now able to change the speed within the editor and even in play mode. Set this to a value other than 0 (what happens if you set it to a negative number?)\nOne last thing for movement - if you have any rigidbody objects in your scene, you will notice that they do not get pushed by the capsule. For this to happen, we have to add velocity to the object whenever the CharacterController detects a collision:\nC#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BasicMovement : MonoBehaviour\n{\n    public float speed;\n    // Start is called before the first frame update\n    void Start()\n    {\n        \n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        var characterController = GetComponent&lt;CharacterController&gt;();\n        var velocity = Vector3.zero;\n\n        if(Input.GetKey(KeyCode.W))\n        {\n            velocity += transform.forward;\n        }\n        if (Input.GetKey(KeyCode.S))\n        {\n            velocity -= transform.forward;\n        }\n        if (Input.GetKey(KeyCode.D))\n        {\n            velocity += transform.right;\n        }\n        if (Input.GetKey(KeyCode.A))\n        {\n            velocity -= transform.right;\n        }\n        \n        characterController.SimpleMove(velocity.normalized*speed);\n    }\n\n    void OnControllerColliderHit(ControllerColliderHit hit)\n    {\n        Rigidbody otherObject = hit.collider.attachedRigidbody;\n        \n        // if object has no rigidbody or shouldnt be movable, return (cancel this function)\n        if (otherObject == null || otherObject.isKinematic) {\n            return;\n        } \n        \n        otherObject.velocity = hit.moveDirection;\n    }\n}\n\nOnControllerColliderHit is triggered by the CharacterController component whenever it detects that a collision has happened.\nMouse Controls\nThe third and last component of a first person controller is the ability to move the camera (and rotate the player) using the mouse.\nCreate a new script called ‚ÄòMouseLook‚Äô\nFor this part, the code is provided for you. Simply copy and paste it into your script. Whats the catch? This part will involve you completing a series of exercises in order to make the script work and to add further functionality. Primarily to test your knowledge, but also to get you more comfortable with editing code.\nC#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MouseLook : MonoBehaviour\n{\n    public GameObject cameraObject;\n    private Vector2 rotation;\n\n    void Start()\n    {\n        Cursor.lockState = CursorLockMode.Locked;\n    }\n\n    void Update()\n    {\n        rotation.y += Input.GetAxis(&quot;Mouse X&quot;) * 1.0f;\n        rotation.x += -Input.GetAxis(&quot;Mouse Y&quot;) * 1.0f;\n        rotation.x = Mathf.Clamp(rotation.x, -80, 80);\n        \n        //Rotate capsule left and right\n        transform.eulerAngles = new Vector2(0,rotation.y);\n        \n        //Rotate camera object up and down\n        cameraObject.transform.localRotation = Quaternion.Euler(rotation.x, 0, 0);\n    }\n}\n\nAdd the script to your capsule player object. You should see that the script has a property, but maybe not one you have seen before. Instead of a number, this property wants a GameObject:\n\nThe script will not work (in fact it will create an error) unless this property is set.  This is left as an exercise for the reader."},"1_Unity/0_Introduction/3_Simple-Orbit-Camera":{"slug":"1_Unity/0_Introduction/3_Simple-Orbit-Camera","filePath":"1_Unity/0_Introduction/3_Simple Orbit Camera.md","title":"Simple 3D Orbit Camera","links":[],"tags":["3d","scripting","unity"],"content":"Note: This is a student-submitted guide. Please comment or get in touch with me (Parker) for suggestions or clarification!\nIntro\nIn this tutorial, you will learn how to make a simple third-person 3D camera view that ‚Äúorbits‚Äù around the player with the mouse. For this we will also be using Unity‚Äôs new input system. I suggest having a read through the other tutorials prior to this as a beginner‚Äôs knowledge of scripting is recommended.\nPart One - Setting Up Inputs\nEnsure the Unity Input system is installed as explained in the other tutorials, and right-click &gt; Create an Input Actions asset in your Assets panel. Create a new Action Map (if you have not got one already) called Gameplay, and rename the Action that was just created to Look. In the Properties panel on the right change the Action Type to Value and the Control Type to Any.\n\n\nIf your game already has an Action Map, just create a new Action in that.\n\nPress the arrow next to Look to show the Bindings for the action. Select the binding that should already be there and set its path to Delta [Mouse].\n\nClick Save Asset at the top of the Input Actions editor window and close it. In the Inspector click Generate C# Class then click Apply.\n\nPart Two - Setting the Scene\nNow we will create the camera and the player character. In the Hierarchy panel right click and create a 3D Object that will be your player (if you haven‚Äôt created a 3D character already). Then create a Camera object. This should be all we need for now.\n\nI used a Cube for my character for the sake of simplicity.\nPart Three - Creating the Script\nCreate a new folder in your Assets folder called Scripts. Inside that, create a new C# Script and call it OrbitCamera.\nInside the script, we first start by declaring some private variables with the [SerializeField] prefix, so we can change them in the Editor whenever we want. These will be the target our camera looks at, the sensitivity of the camera (aka how fast it will orbit around responding to mouse movement), the radius at which the camera orbits, and how much camera smoothing is applied.\n\nNow we declare two variables that will contain the yaw and pitch of the camera. This essentially means the angle the camera is pointing side-to-side and up-and-down respectively.\n\n\n\nAs you can see in this incredibly detailed diagram, yaw is a rotation on the Y axis and pitch is a rotation on the X axis (at least in Unity).\n\n\nAlso, include a variable called inputActions for our Input Actions asset.\n\nIn our Start method, we first set our yaw and pitch by getting the current rotation of the camera in the Y and X axis.\n\nThen we set the inputActions variable to be our Input Actions asset.\n\nNow we will create a method called Look, that is going to take the value from the Delta [Mouse] binding we made earlier (essentially how much the mouse has moved in the last frame) and move the camera accordingly.\nFirst we make two local variables inside the method that are going to split the input into the X and Y parts of our mouse movement seperately.\n\nThen, we change the yaw and pitch with them respectively, also including our sensitivity variable. Note here that I take mouseY away from the pitch, to make sure our camera pitches down when we move our mouse down.\n\nFinally, we add the following line of code. This essentially smoothly moves (or linearly interpolates, if you wanna get technical) the camera‚Äôs current rotation to a new one, with our new pitch and yaw values. The rate at which this shift in rotation happens is based on our smoothing variable.\n\nNow we have to add to our Update method to use the Look method we made. As the input for Look, read the value of our Look binding in the inputActions asset.\nAfter that, we put in a line of code that uses the transform.forward variable to get the forward direction of whereever we‚Äôre looking at, and uses that to move the camera back from our target according to orbitRadius. We can now increase orbitRadius to ‚Äúzoom out‚Äù away from our target. This must happen after you rotate the camera with the Look method!\n\nSave the script and add it to your Camera object. Drag the 3D character object we made earlier into the ‚ÄúTarget‚Äù value under the script in the Inspector window, and adjust the values as you see fit. Here are mine for reference.\n\nNow, run the game and see what happens!\n\nYou can now move the mouse to orbit around your object. However, if you keep moving it up you‚Äôll see you can keep flipping around it, which isnt how a third-person camera usually works. We need some code to stop the pitch from getting too high or too low.\nPart Four - Limiting the Pitch\nBack in our OrbitCamera script, go back to the Look method. Right after we change our pitch variable and before doing the rotation, we insert a line of code that uses the Clamp method to ensure the pitch doesn‚Äôt go below or above a specified number. In this example we will limit it to 80 degrees maximum to stop the spinning, and 0 degrees minimum so it doesn‚Äôt go through the floor.\n\nSave the script, press play and you‚Äôre done!\nNow you should have a proper 3D orbit camera! More complex solutions with things like colliding with walls are also possible with packages like Cinemachine, but this works as a very simple solution for prototyping.\nFinal Code\nHere is the finished code. WARNING: Please try to follow the tutorial first and not just copy-paste this! If you have not at least attempted to understand the code I will not provide any help or troubleshooting.\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class OrbitCamera : MonoBehaviour\n{\n    [SerializeField] private Transform target;\n    [SerializeField] private float sensitivity = 1f;\n    [SerializeField] private float orbitRadius = 5f;\n    [SerializeField] private float smoothing = 5f;\n\n    private float yaw;\n    private float pitch;\n\n    private InputActions inputActions;\n    \n    // Start is called before the first frame update\n    void Start()\n    {\n        yaw = transform.eulerAngles.y;\n        pitch = transform.eulerAngles.x;\n\n        inputActions = new InputActions();\n        inputActions.Gameplay.Enable();\n    }\n\n    void Look(Vector2 mouseDelta)\n    {\n        float mouseX = mouseDelta.x;\n        float mouseY = mouseDelta.y;\n\n        yaw += mouseX * sensitivity;\n        pitch -= mouseY * sensitivity;\n\n        pitch = Mathf.Clamp(pitch, 0f, 80f);\n        \n        transform.rotation = Quaternion.Lerp(transform.rotation, Quaternion.Euler(pitch, yaw, 0), 1/smoothing);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        Look(inputActions.Gameplay.Look.ReadValue&lt;Vector2&gt;());\n        transform.position = target.position - transform.forward * orbitRadius;\n    }\n}\n"},"1_Unity/0_Introduction/4_Input-System-Quick-Start":{"slug":"1_Unity/0_Introduction/4_Input-System-Quick-Start","filePath":"1_Unity/0_Introduction/4_Input System Quick-Start.md","title":"Input System Quick Start","links":[],"tags":[],"content":"Avaliable on Loop\nThis guide has not been ported to this site yet, but it is available on Microsoft Loop:\n(Ctrl+Click the link)\nInput System Quick Start.loop"},"1_Unity/0_Introduction/index":{"slug":"1_Unity/0_Introduction/index","filePath":"1_Unity/0_Introduction/index.md","title":"Introduction","links":[],"tags":[],"content":""},"1_Unity/1_Coding/0_CSharp-Resources":{"slug":"1_Unity/1_Coding/0_CSharp-Resources","filePath":"1_Unity/1_Coding/0_CSharp Resources.md","title":"C# and Scripting Resources","links":[],"tags":["resources"],"content":"Learning to code can seem daunting, but the only way to get better is through exposure! There are thousands of tutorials online all with unique learning styles. The best way to learn coding is by doing it, and in this post, I will recommend some resources to get you started!\nOfficial Series by Unity: Beginner Scripting\nThis series assumes basic knowledge of Unity so it is recommended that you first complete the ‚ÄúUnity - Introduction‚Äù guide. The guide includes pre-written code but does not expect you to write your own. Once you have completed it, you may want to learn more about the individual elements and structures which make up a script, in which case this series is perfect for you.\nlearn.unity.com/project/beginner-gameplay-scripting\nScript Editor\nThe guide uses an older version of Visual Studio as the script editor. You should use Rider as your editor (see Unity - Introduction guide for steps on how to set your default script editor.)\nI strongly recommend watching these videos:\n\n\nScripts as Behaviour Components\n\n\nVariables and Functions\n\n\nConventions and Syntax\n\n\nIF Statements\n\n\nLoops\n\n\nScope and Access Modifiers\n\n\nAwake and Start\n\n\nUpdate and FixedUpdate\n\n\nVector Maths\n\n\nFeel free to watch more of the series if you wish!\nCodeCademy\nCodeCademy is a website which provides interactable coding courses, meaning you will learn by practice!\nTheir C# course is free and will give you a good foundation of the features and syntax of C#\nIf you prefer to learn at your own pace by following a written guide, you will enjoy this course.\nI recommend completing all of the tutorials up until (and including) Methods.\nwww.codecademy.com/learn/learn-c-sharp\nNotice\nCodeCademy will teach you the general basics of C#. While all of the knowledge covered by the course is transferrable to Unity, keep in mind that there are certain Unity-specific features that this course won‚Äôt cover."},"1_Unity/1_Coding/1_Advanced-CSharp":{"slug":"1_Unity/1_Coding/1_Advanced-CSharp","filePath":"1_Unity/1_Coding/1_Advanced CSharp.md","title":"C# Advanced Practices + Tips and Tricks","links":[],"tags":[],"content":"This guide is ever-growing!\nThere are hundreds of practices, cheats, tips and tricks within Unity - way too many to document in one go! This guide will updated over time, and students are welcome to contribute to it!\nLast updated: 13.02.25\nFeel like you are familiar with C# scripting and want to take your coding to the next level? This guide is for you! In no particular order, here are some more advanced C# (and general programming) practices you may not have known about!\nDid you know: C#\nDid you know: you can embed any variable directly into a string, without having to append it?\nAppend $ to the start of the string, and surround any variables with curly brackets:\nC#\nstring name;\nint age;\n\n//Instead of\nDebug.Log(&quot;Hi &quot; + name + &quot;, you are &quot; + age + &quot; years old!&quot;);\n\n//Yuck!\n\n//We can write\nDebug.Log($&quot;Hi {name}, you are {age} years old!&quot;);\n//Wow!\n\nDid you know: you can simplify simply if-else statements?\nThe Ternary Operator (?) can use a boolean expression to select one of two options:\nC#\nstring rossIsLate;\n\n//Instead of\nif(time &gt; 10)\n{\n\trossIsLate = &quot;yes&quot;;\n}\nelse\n{\n\trossIsLate = &quot;no&quot;;\n}\n\n//Yuck!\n\n//We can write\nrossIsLate = (time &gt; 10) ? &quot;yes&quot; : &quot;no&quot;;\n\n//result = (condition) ? &lt;option if true&gt; : &lt;option if false&gt;;\n//Wow!\n\nDid you know: you can simplify null checks with the null-conditional operator (?.)\nC#\nGameObject enemy;\n\n//Instead of \nif(enemy != null)\n{\n\tenemy.SpontaneouslyCombust();\n}\n\n//Yuck!\n\n//We can write\nenemy?.SpontaneouslyCombust();\n\n//Wow!\n\nDid you know: you can set any variable type as nullable with T?\nC#\n// num can be ...,-2,-1,0,1,2,...\n// it can not be null, it is 0 by default.\nint num;\n\n//Yuck!\n\n// coolerNum can be ...,-2,-1,0,1,2,...\n// but it can also be null (and is null by default)\nint? coolerNum;\n\n//Wow!\n\nProgramming Design Patterns\nDesign patterns are common solutions to issues one can face while programming. Like a blueprint, you can think of them as general concepts for solving common challenges. Design patterns are not anything specific in any language, but are more general concepts that are universally understood by programmers. The actual implementation may differ depending on who is programming.\nYou can learn more about design patterns here: refactoring.guru/design-patterns/what-is-pattern\nThe ‚ÄúSingleton‚Äù pattern is one of the most used design patterns out there, and for a good reason! If you have only one instance of a script, it allows you to reference that script from anywhere in the code in just one simple line.\nThis is particularly useful for game development: think of any time that you had a script such as CharacterMovement.cs, or GameManager.cs, something that you want to reference a lot in other scripts.\nOrdinarily, you would need to create a variable to hold a reference to that script, and then either use GetComponent&lt;&gt; or drag the script in manually through the editor. This can get messy really quick.\n\nEvery time you want to reference CharacterController (a script on the Player), you have to first get a reference to the Player (expensive) then use GetComponent (expensive). A lot of repeated code, a lot of expensive calls. Good for quick prototypes, not the best idea for full games.\nNow imagine if, at any point throughout any script, you could simply write CharacterMovement.instance and have an instance of that script. This is made easy with singletons:\n\nAssuming there is only one instance of CharacterController in any given scene, the singleton pattern exposes a very handy CharacterController.instance variable, allowing you to reference that script in one line, anywhere in your project, without having to create unnecessary variables or run expensive calls.\nLearn more about singletons: refactoring.guru/design-patterns/singleton\nSingletons in Unity\nImplementing singletons in Unity is super easy. Create a new script in your project: Singleton.cs\nPaste this code:\nC#\nusing UnityEngine;\n\n//Singleton Pattern\npublic abstract class Singleton&lt;T&gt; : MonoBehaviour where T : MonoBehaviour\n//When defining a new singleton, T (or type) can be any other monobehavior\n//This helps us seperate one type of singleton from any other\n{\n    \n    //static = the value of the variable is synced between all instances of this script\n    private static T instance;\n    //A private variable to hold the instance of the singleton\n    \n    public static T Instance =&gt; instance;\n    //A public variable which returns the instance\n    \n    protected void Awake()\n    //Before OnEnable() and Start() - this will likely be the first code run for any script\n    {\n        if (instance == null)\n        {\n            instance = this as T;\n        }\n        //if no instance has been set yet, set the current instance as &quot;The Instance&quot;\n        else if (instance != this)\n        {\n            Debug.LogWarning(&quot;Multiple instances of the singleton type &#039;&quot; + instance.GetType() + &quot;&#039; were found. Deleting this instance&quot;);\n            Destroy(gameObject);\n        }\n        //If multiples are detected, delete multiple\n    }\n}\n\nAs mentioned, this is only one possible implementation and you may find ones that differ online.\nNow head to the script that you want to make a singleton. Remember: You should only have one instance of the script in the scene, otherwise this pattern will delete any duplicates!\nWith ScriptName being the name of your script, change the top of your script from\npublic class ScriptName : MonoBehaviour\n\nto\npublic class ScriptName : Singleton&lt;ScriptName&gt;\n\nand you‚Äôre good to go! You should now be able to reference the script by typing ScriptName.Instance anywhere in your project!\nAt runtime, any number of things can occur in your game. What happens when you kill an enemy? How about when you collect a power-up or complete an objective? You may often need a mechanism that allows objects to notify others without directly referencing them.\nThe observer pattern is a common solution to this problem. It allows your objects to communicate using a ‚Äúone-to-many‚Äù dependency. When one object changes state, all dependent objects get notified automatically:\nThe observer pattern is made possible in Unity using Events and Delegates.\nIn Unity\nSo far, you have probably been using Update() to trigger changes in an object. And this works for checks that need to happen on a frame-by-frame basis, such as checking for keypresses and moving a character accordingly. But many states in your game don‚Äôt need to update every frame, such as the UI that shows the amount of currency that your player has, or whether or not to show the ‚ÄúGame Over‚Äù screen. Using event-based logic, we can make it so code on certain objects (observers) is only triggered when one specific object (the subject) says so.\nDelegates\nDelegates are ‚Äúfunction containers‚Äù. They hold a list of functions to be called at a certain point.\nC#\nusing UnityEngine;\n\npublic abstract class Currency : MonoBehaviour\n{\n\n    public static int amount = 1000;\n    \n    //Define a new delegate template\n    //For example, all functions inside this delagate:\n    //- Return &#039;void&#039; (aka nothing)\n    //- Have no parameters\n    delegate void OnCurrencyChanged();\n    \n    //Create an instance of this delagate\n    //This delegate can now store functions and invoke them\n    OnCurrencyChanged onCurrencyChanged;\n    \n    private void Start()\n    {\n    \t//Subscribe the &quot;UpdateCurrencyUI&quot; function to our delegate\n    \tonCurrencyChanged += UpdateCurrencyUI;\n    \t\n    \t//At any point, we can subscribe more functions: \n    \t\t//[delegate] += [function];\n    \t\t\n    \t//unsubscribe those functions:\n    \t\t//[delegate] -= [function];\n    \t\t\n    \t//overwrite all functions with just one function:\n    \t\t//[delegate] = [function];\n    \t\t\n    \t//or clear the delegate entirely\n    \t\t//[delegate] = null;\n    }\n    \n    public void UpdateCurrencyUI()\n    {\n    //Code to update UI text for currency\n    }\n    \n    \n}\n\nCurrently we have a delegate onCurrencyChanged with one function, UpdateCurrencyUI\nMeaning that when we invoke this delegate, it will run that function, and any other function we add to it. But how do we actually invoke this delegate?\nC#\n...\npublic void AddCurrency(int addAmount)\n{\n\tamount += addAmount;\n\t\n\t//At this point, we know that the state of &#039;currency&#039; changes,\n\t//so we should invoke our delegate now\n\t\n\tonCurrencyChanged?.Invoke();\n\t\n\t//[delegate].Invoke() calls all subscribed functions\n\t//If the delegate is null (has no subscribers), this\n\t//will throw an error.\n\t//By appending ?, the delegate is only invoked if it is not null\n}\n...\n\nThis is great if all of the subscribed functions are on the same script as the delegate, but what if we want to subscribe functions from a different script or object?\nPublic Static Delegates\npublic static OnCurrencyChanged onCurrencyChanged;\nThis means two things:\nThe delegate will be the same across all instances of Currency.cs;\nand we can access this delegate anywhere from within our codebase.\nLet‚Äôs separate our logic into two scripts:\nCurrency.cs - Responsible for managing the state of our currency\nC#\nusing UnityEngine;\n\npublic abstract class Currency : MonoBehaviour\n{\n\t\t\n    public static int amount = 1000;\n    \n    delegate void OnCurrencyChanged();\n    OnCurrencyChanged onCurrencyChanged;\n    \n    public void AddCurrency(int amount)\n\t\t{\n\t\t\tcurrency += amount;\n\t\t\t\n\t\t\tonCurrencyChanged?.Invoke();\n\t\t}\n    \n}\n\nPlayerStatsUI.cs - Solely responsible for updating UI\nC#\nusing UnityEngine;\n\npublic abstract class PlayerStatsUI: MonoBehaviour\n{\n\n    [SerializeField] TMP_Text currencyLabel;\n    \n    //It is good practise to unsubscribe any functions\n    //from this script when it is disabled, as attempting to\n    //call a function on a disabled object will cause errors.\n    \n    private void OnEnable()\n    {\n    \t//subscribe UpdateCurrencyUI to the delegate\n    \tCurrency.onCurrencyChanged += UpdateCurrencyUI;\n    }\n    \n    private void OnDisable()\n    {\n    \t//unsubscribe UpdateCurrencyUI from delegate\n    \tCurrency.onCurrencyChanged -= UpdateCurrencyUI;\n    }\n    \n    //Only runs when invoked by delegate\n    public void UpdateCurrencyUI()\n    {\n    \tcurrencyLabel.text = Currency.amount;\n    }\n    \n}\n\nEvent Delegates\npublic static event OnCurrencyChanged onCurrencyChanged;\nBy adding an ‚Äòevent‚Äô modifier to our delegate, only the script which defines the delegate can invoke it. Subscriber classes can not invoke the delegate, nor can they overwrite or clear it.\nWhile the functionality is the same, this reduces our chance of errors.\nSee also: Actions in Unity, Unity Events, and Scriptable Object Events."},"1_Unity/1_Coding/index":{"slug":"1_Unity/1_Coding/index","filePath":"1_Unity/1_Coding/index.md","title":"Coding","links":[],"tags":[],"content":""},"1_Unity/2_2D/0_Sprites-and-Spritesheet-Resources":{"slug":"1_Unity/2_2D/0_Sprites-and-Spritesheet-Resources","filePath":"1_Unity/2_2D/0_Sprites and Spritesheet Resources.md","title":"Sprites and Spritesheet Resources","links":[],"tags":["2d","animation","rigging","sprite","sprites","spritesheet","unity","resources"],"content":"Notice\nThis is a temporary page to collate a handful of resources to get started with 2D sprites and 2D animation in Unity. This page will soon be replaced with a custom guide with clear step-by-step instructions for these features.\nPlease use the below resources, in conjunction with independent research, to get started.\nKeywords to google: ‚ÄúUnity Spritesheet Editor‚Äù, ‚ÄúUnity 2D animation package‚Äù, ‚ÄúUnity 2D Rigging‚Äù, ‚ÄúUnity spritesheet animations‚Äù\nUnity Learn: Introduction to Sprite Editor and Sheets\nIntroduction to the sprite editor - Learn how to import the sprite editor and slice an image into multiple sprites\nlearn.unity.com/tutorial/introduction-to-sprite-editor-and-sheets#\n\nUse several sprites to create a 2D character rig\nIntroduction to 2D character rigging - If you have a sprite sheet where each sprite is a different part of the character, this tutorial teaches you how to combine and rig them to create an animatable character\nyoutu.be/k4LkNtp9\\_wU\nUnity Learn: Turn individual sprites into an animation\nIntroduction to sprite animations - If you have a spritesheet where individual sprite acts as a frame of animation, this tutorial teaches you how to combine them together to create a ‚Äústop-motion‚Äù-like animation\nlearn.unity.com/tutorial/introduction-to-sprite-animations#\n"},"1_Unity/2_2D/1_Simple-2D-Player-Controller":{"slug":"1_Unity/2_2D/1_Simple-2D-Player-Controller","filePath":"1_Unity/2_2D/1_Simple 2D Player Controller.md","title":"Simple 2D Controller","links":[],"tags":["2d","introduction","scripting","unity"],"content":"Note: This is a student-submitted guide. Please comment or get in touch with me (Parker) for suggestions or clarification!\nIntro\nIn the Introduction tutorial you will have been introduced to Unity by making a simple player controller. This one will also be a very simple controller with minimal code, but will be a lot more customizable for any kind of 2D game you need. The code for movement, jumping etc. will all be seperate, so you can make a top-down game without jumping (Stardew Valley, Cult of the Lamb) or a side-scrolling platformer (Super Mario Bros, Hollow Knight, Celeste).\nYou will be able to tweak any value you want for your movement to make it as satifsying as possible, including:\n\n\nTop Speed\n\n\nAcceleration\n\n\nJump Height\n\n\nJump/Fall Curves\n\n\nMid-Air Jumps\n\n\nThis tutorial will be heavily adapted from this video by Shinjingi on Youtube, which I highly recommend watching.\nPart One: Setting the Scene\nFirstly, create your Unity project and ensure it is using the Universal 2D template.\nBefore we make our character, we need a space for them to move on. Right click on the blank space in the Hierarchy window on the left and create a new 2D Sprite &gt; Square. Set its Position in the Inspector panel on the right to X: 0, Y: -4.5, Z: 0. Then set its Scale to X: 20, Y: 1, Z: 1. This creates a floor.\n\nQuick tip: You can right-click the top bar on the Transform component &amp; click Reset to reset all the values to default before this.\nThe floor is still just a sprite with no functionality, so we will need to add a Component to let it interact with the player using physics. Click the Add Component button at the bottom of the list of components in the Inspector, and search for the Rigidbody 2D component. Now that it‚Äôs been added, click the Body Type dropdown and select Static. Now the floor can interact with the player, but won‚Äôt move by itself.\nAlthough we‚Äôve given the floor a Rigidbody component, we still need it to be able to collide with the player, so they can stand on it. Add another new component and search for the Box Collider 2D component.\nNow, select the Camera object in the Hierarchy panel, and set its Size in the Inspector panel to 10 so everything is in frame.\n\nPart Two: Creating the Player\nTo create the player, right click the Hierarchy window again and add a new 2D Sprite &gt; Square. Ensure their Position is at X: 0, Y: 0, Z: 0 so they are directly above the floor we made.\n\nNow add a Rigidbody 2D component the same way as before. Set the Body Type to Dynamic, as our player will be moving. Set the Collision Detection to Continuous, and set Interpolate to Interpolate. This should give our player some accurate and smooth collisions for hitting the floor no matter how fast they‚Äôre going. Then under the Constraints dropdown, check Freeze Rotation on the Z axis. This stops your character from spinning around.\n\nNow that‚Äôs done it‚Äôs finally time to start coding!\nPart Three: Side-to-Side Movement\nThe different parts of the controller like moving, jumping etc. will be made in different script components, so you can pick and choose what you want to include in your game. For this first one we will be handling input and letting the player move side to side.\nHandling Player Input\nFor player input we will be using Unity‚Äôs new Input System, as it allows for managing several input methods (Keyboard, Controller, etc.) much more smoothly than the old Input Manager. Information on installing it and an explanation of creating Input Actions using it can be found on the Input System Quick Start Guide.\nUsing the Input System\nAfter creating an Input Actions Asset, open it and create a new Action Map called Gameplay. Rename the existing Action created in the Map to ‚ÄúMove‚Äù.\n\nRemember to click the ‚ÄúSave Asset‚Äù button!\nIn the action properties panel on the right, set the Action Type to Value and the Control Type to Vector 2. This means our input (from a joystick or keyboard) is going to be read as a two-dimensional vector.\nNow the action has been created, we need to add some bindings to it. Click the plus (+) icon next to the Move binding and select Add Up\\Down\\Left\\Right Composite. Optionally, you can right click and delete the Up and Down bindings if you don‚Äôt need them (i.e if you‚Äôre making a platformer character). Now we have bindings for going up, down, left and right.\n\nSelect the Left binding &amp; click on the dropdown next to Path in the properties panel. Then just hit the key you want to correspond to Left and select it with the mouse. I chose the ‚ÄúA‚Äù key in this case, and selected ‚ÄúA [Keyboard]‚Äù in the list. Then do the same with your Right binding. I chose the ‚ÄúD‚Äù key.\n\nIf you want to add gamepad support, click the plus icon and click Add Binding. Then under the Path search for and select ‚ÄúLeft Stick [Gamepad]‚Äù.\nFinally, click the Save Asset button at the top(!!!). In the Inspector Panel, select ‚ÄúGenerate C# Class‚Äù, and hit apply. You‚Äôre done!\nCreating the Input Script\nBefore implementing any movement code, we will first create a script component that handles the player‚Äôs input. Keeping it seperate to our Move script keeps our code clean and also gives us the possibility of having AI-controlled NPCs move using the same way as our character, which will be covered in a future tutorial. (Also, you‚Äôll be able to use this controller in 3D games too!)\nIn the Scripts folder, create a new folder called Controllers. Then Create &gt; C# Script. Name this script PlayerController. Open it in Rider (please refer to the ‚ÄúYour First Script‚Äù section in the Introduction tutorial if you do not know how to enable Rider in your editor!). You should be met with the default empty script code as shown below.\n\nYou can safely delete the two Start and Update functions here, as we won‚Äôt be needing them.\nWe will first create a variable for the InputActions asset we made earlier. Create a private variable with type InputActions and name ‚ÄúinputActions‚Äù.\nPro Tip: If you didn‚Äôt know already, press Tab to auto-complete the suggested value that pops up when coding. You can use the up/down keys to switch between selections.\n\n\nThe scope of the variable is private as it‚Äôs only ever used within this script.\n\nNow we need to enable the InputActions asset &amp; the Gameplay action map by using an OnEnable() function under this.\n\n\nThe OnEnable() function runs whenever this script is enabled (in this case immediately).\n\nNow we need to make a function for getting the direction &amp; magnitude of our input aka a vector. After declaring the variable, Create a public function called ‚ÄúRetrieveMoveInput‚Äù that takes a GameObject as an input.\nThen, get it to return the value of the Move binding as a vector using the following code.\n\n\nThe function is public as we will be calling it inside our Movement script.\n\nNow we can move onto the fun part: creating the movement code!\nCreating the Movement Script\nIn the Scripts folder create a new folder called Capabilities. Then in the Capabilities folder create a new C# Script called Move.\nNow it‚Äôs time to create our variables. Firstly we need one for the input script we just made. Declare a private PlayerController variable called ‚Äúinput‚Äù.\n\nNow create some private float variables for the max speed and acceleration. We add [SerializeField] before the variables here with a limited Range so that they can show up as sliders to adjust in the Inspector panel.\n\nAfter that we need to declare variables for values that will be used in our movement calculations.\n\nDelete the Start function and create an Awake function, and inside it set the ‚Äúbody‚Äù variable to be the Rigidbody 2D component we added earlier. We can do this by using the built-in GetComponent function.\n\n\n\nThe Awake function is always run first in the script, no matter what.\n\n\nIn the Update function, set our direction to be the RetrieveMoveInput we created earlier. Then, we create a new vector consisting of just the X axis, or horizontal part, of our input direction. After that we set the desired velocity to be the horizontal vector with its magnitude multiplied by our Max Speed variable.\n\nNow create a new FixedUpdate function. FixedUpdate repeats constantly like the Update method but doesn‚Äôt depend on framerate, but rather fixed intervals of time. If you‚Äôve ever played an old game that runs way too slow or too fast depending on how fast your PC is, it‚Äôs because they didn‚Äôt do this.\nIn the function, firstly get our rigidbody‚Äôs current velocity to start with.\n\nNow we calculate the maximum speed change value, by multiplying acceleration by the change in time. After that, we move our current velocity towards the max speed using that value.\n\n\nYou don‚Äôt need to 100% understand all the maths for this. All you have to know is that the MoveTowards function will let us set how fast we get up to the max speed by changing Max Acceleration in the editor later.\n\nFinally, set the rigidbody velocity to our newly calculated velocity value.\n\nNow, back in the editor, select the player and add the PlayerController and Move script components.\nHit the Play button above the viewport and you should be able to move your character! Adjust the max speed and acceleration values to your taste. I suggest turning up Max Acceleration to make the movement feel less floaty.\n\nOPTIONAL: Up and Down Movement\nThis side to side movement would work great for something like a platformer. However, there are also games with top-down 2D movement like Don‚Äôt Starve, Cult of the Lamb and Vampire Survivors which you might want to make. Let‚Äôs modify our code to allow for that now.\nUp and Down Input Actions\nFirstly we need to re-implement the actions for ‚Äúup‚Äù and ‚Äúdown‚Äù in our Input Actions asset. Go back to our 2D vector binding and bind new buttons for the Up and Down parts like we did earlier. In this example I used the W and S keys respectively.\n\nNow all we need to do is update our movement script to let us move up and down.\nModifying the Movement Script\nOpen the Move.cs file back up. You‚Äôll see that there‚Äôs already an error when we set the direction variable, as we were only setting the X axis part of it.\n\nDelete the ‚Äú.x‚Äù part at the end here too.\n\nIn the line under where we calculate our desired velocity, remove the vector we created with the Y part set to zero, and just replace it with our input direction variable.\n\nNow, in our FixedUpdate function, remove all the ‚Äú.x‚Äù parts we added to the velocity and desired velocity variables, and change the Mathf.MoveTowards function to a Vector2.MoveTowards function, as we‚Äôre dealing with 2D vectors instead of numbers now.\n\nNow that all the coding‚Äôs done, go back to the editor and set the gravity scale of your Player object‚Äôs rigidbody to 0 in the inspector. You don‚Äôt want your player constantly going downwards in a top-down game.\n\nNow you should be able to move the character perfectly! Again, adjust the top speed and acceleration values to taste.\n\nPart Four: Implementing Jumps\nOnce you have side-to-side movement working, you will probably want to implement a Jump capability. To do that we first need to add a new input binding for it.\nAdding the Jump Input\nThis is the same as creating your movement bindings, just open up your InputActions asset, and add a new Action using the plus at the top of the Actions bar. Name this action ‚ÄúJump‚Äù.\n\nIt should already come with a binding, so just set the path to whatever key or button you want. I chose Space on the keyboard, but you can also add a new binding for a button on the controller. I chose the South button, which is A on an Xbox controller, B on a Nintendo controller, and X on a Playstation controller. And O on an Ouya controller (okay I‚Äôll shut up now).\nNow we have to add the bindings to our Player Controller script. We may want the player to be able to influence the height of their jump depending on how long the button is pressed like in many other popular platformer games, so we will have seperate states for the jump starting and ending depending on the button input.\nFirstly, open the PlayerController.cs script and create a new private bool variable called isJumping so we can keep track of whether the input is pressed.\n\nNow, we will need to add functions to set isJumping to true or false based on the input starting and stopping. Create two private void functions called JumpStarted and JumpCanceled. These take weird CallbackContext variables as input, they‚Äôre unfortunately necessary to include.\n\nNow in the OnEnable function we make sure these functions are listening for the input action.\n\nFinally, we need to create a new public function to return the value of our isJumping variable so we can use it in our movement script.\n\nNow our inputs are ready for jumping. However, before we implement the jump code we need to add a check if the player is on the ground before allowing them to jump in the first place.\nCreating a Ground Check\nIn your Scripts folder, create a new folder called Checks. Within that folder create a script called Ground. In this we are going to check all the things the player is colliding with (aka what they‚Äôre touching) and check whether one of them is the ground or not. We will first need to create a private void function called EvaluateCollision, that takes a variable of type Collision2D as input.\n\nTo check the collision we are going to use what is known as a for loop, basically meaning we go through a list of data (in this case contact points of the collision) and refer to the current one we‚Äôre on (the 1st, 2nd, 3rd etc‚Ä¶) using the variable ‚Äúi‚Äù. Then we can run tests on this ‚Äúi‚Äù point to see if it is flat enough to be considered ground. I have made a fantastically detailed diagram showing how a for loop iterates through a list:\n\n\nAlso, computers start counting a list at 0. Dont ask me, that‚Äôs just how it works.\n\nTo do this we check the ‚Äúnormal‚Äù (basically the angle between us and the point we contact the floor). If the normal is 1 it is completely flat under us, but we will consider anything over 0.9 as ground just in case. If that is true, onGround is set to true, but otherwise it stays false.\n\n\n‚Äúi++‚Äù means we add 1 to i after we check the collision, so we can move onto the next one in the list.\n\nNow we just have to run this code whenever we make contact, or a collision, with another object. Unity has some built-in functions for this, so we‚Äôll use them now.\n\nFinally, we‚Äôll create a function to return our onGround value so we can use it in our jump script.\n\nCreating the Jump Script\nWe‚Äôre going to create a whole new script for jumping, again for the sake of modularity. Go to the Capabilties folder and create a C# Script called Jump.\nThis jump method will have different amounts of gravity applied on the player for both their upwards and downwards arc of their jump independently. This results in a satisfying stronger plummet to the ground as the player falls, which has been used in 2D platformer games from the original Super Mario Bros all the way up to modern titles like Celeste. The amount we hold the jump button for will also be accounted for in this, allowing for shorter hops by simply tapping the jump button. This is obviously unrealistic so I would only recommend this method for 2D platformer type games.\nTo start we need to declare some variables again. We‚Äôll start with the ones we can change in the Inspector panel. This will be our jump height, the maximum amount of mid-air jumps we can do, and the amount of gravity that gets applied upwards and downwards.\n\nThen we declare the rest of the variables we‚Äôll be using in our code.\n\n\nThis is a lot to add, but trust me, we‚Äôll be needing all of them.\n\nNow, change the provided Start function to an Awake function, and within it get the Ground, PlayerController and Rigidbody components we need. We will also set the default gravity scale to 1 and make sure our JumpReset variable is set (this is to stop the player from constantly jumping when holding the button down).\n\nNow, in the Update function we check for our Jump input, and set the value of that to the desiredJump variable.\n\nNow for the jump logic. We will start with the FixedUpdate function. Set the onGround variable using the GetOnGround function we wrote earlier and set our velocity variable using the current velocity of our rigidbody.\n\nNow we set our jumpPhase variable, with an if statement checking if we are on the ground and not moving up or down.\n\nAfter that, we make another if statement, seeing if our Jump Reset variable is true, and that the player has pressed the jump input. If both are true (signified by the &amp;&amp; or ‚Äúand‚Äù operator there), we set both to false and then execute a JumpAction function that contains our code for actually doing the jump. We‚Äôll make that later.\n\nUnder that, we make another if statement that applies our different gravity scales based on if we‚Äôre going up or down.\n\nFinally, we set our rigidbody‚Äôs velocity to our own velocity variable.\n\nNow it‚Äôs time to make our JumpAction function. Start with an if statement with the following condition. This uses the || or ‚Äúor‚Äù operator, to check if we are either:\n\n\nOn the ground;\n\n\nOur maxAirJumps variable is greater than or equal to our jumpPhase. The jumpPhase is set to 0 when the player hits the ground and 1 when a jump is executed. Therefore, if maxAirJumps is set to 1, we get one mid-air jump and so on.\n\n\n\nNow in the actual jump code we increase our jumpPhase by one, and calculate our jump velocity based on our set height using some maths. Then we add that to our velocity variable.\n\nAnd we‚Äôre done! Add the Ground and Jump scripts to your player and you should be able to jump. Tweak the three parameters to make your jump feel satisfying."},"1_Unity/2_2D/index":{"slug":"1_Unity/2_2D/index","filePath":"1_Unity/2_2D/index.md","title":"2D","links":[],"tags":[],"content":""},"1_Unity/3_Shaders/0_Full-Screen-Shaders":{"slug":"1_Unity/3_Shaders/0_Full-Screen-Shaders","filePath":"1_Unity/3_Shaders/0_Full-Screen Shaders.md","title":"Full Screen Shaders","links":[],"tags":[],"content":"Avaliable on Loop\nThis guide has not been ported to tech.wsagames.com yet, but it is available on Microsoft Loop:\n(Ctrl+Click the link)\nFull-Screen Filter Shaders.loop"},"1_Unity/3_Shaders/index":{"slug":"1_Unity/3_Shaders/index","filePath":"1_Unity/3_Shaders/index.md","title":"Shaders","links":[],"tags":[],"content":""},"1_Unity/index":{"slug":"1_Unity/index","filePath":"1_Unity/index.md","title":"Unity Homepage","links":[],"tags":[],"content":""},"2_Blender/0_Core/0_Glossary":{"slug":"2_Blender/0_Core/0_Glossary","filePath":"2_Blender/0_Core/0_Glossary.md","title":"Glossary","links":["[https:/help.sketchfab.com/hc/en-us/articles/360017681872-Glossary-of-3D-Terms"],"tags":[],"content":"Some terms adapted from Sketchfab Website\nVertex/Vertices\nThe smallest part of a 3D model, the point of intersection between three or more edges (lines) in 3D space\n\nEdge\nA line that exists between two Vertices, shown shaded in red.\n\nFace\nThe most basic part of a 3D Polygon, when three or more Vertices connect to make a visible surface, shown shaded in red.\n\nPolygon\nA shape with three or more Vertices connected. Pretty much all objects in 3D games have meshes made up of polygons. In the image below you can see the individual four-sided polygons making up this mesh.\nMesh\nA collection of Vertices, Edges and Faces that define the shape of a 3D model.\n\nTri\nA three-sided Polygon. All game renderers convert the polygons of a mesh into tris.\nAbove - The faces of this cube have been split into tris\nQuad\nA four-sided Polygon. It is strongly recommended to ensure meshes intended for use in games are solely made up of quads or tris, as quads can be easily converted to tris without any potential shading errors. Also, quads are much easier to work with when modelling.\nN-Gon\nA term for any Polygon with more than four edges/sides.\n\nTopology\nThe way the polygons (whether Tris, Quads or N-Gons) of a 3D model‚Äôs Mesh are organized and connected to one another.\nNormal\nRefers to the direction a polygon is facing. Used for a lot of shader calculations to calculate the way light reflects off each face.\n\nMaterial\nRefers to the optical properties of a 3D object‚Äôs surface, such as colour, shininess, etc. You can use multiple materials on a single 3D model.\nTexture\nAn image mapped to the surface of your model‚Äôs material(s). Textures can define the colour of the object as well as shiny/rough or metallic/non-metallic areas.\nEdge Loop\nA series of connected Edges that form a loop around the mesh.\n\nModifiers\nOperations you can apply to a mesh to change its geometry non-destructively. Modifiers can be enabled, disabled and re-ordered as you wish.\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore and after applying a Subdivision modifier, which adds more polygons to smooth out the mesh."},"2_Blender/0_Core/10_Exporting-to-Unity":{"slug":"2_Blender/0_Core/10_Exporting-to-Unity","filePath":"2_Blender/0_Core/10_Exporting to Unity.md","title":"Exporting to Unity","links":[],"tags":[],"content":"In Unity\nBefore you start, it is good practice to make a folder for your model imports if you do not have one already (see Best practices for organizing your Unity project)\nIn Blender\n\n\nRecommended: Join objects into one mesh (select all then Ctrl+J) unless you need it for rigging etc. This makes it easier to handle in Unity\n\n\nSet the origin of your mesh to a desired location (likely the center of the object). In Object Mode open the Object tab at the top, the Set Origin.\n\n\n\nCenter object to world origin (0,0,0). This can be done with Alt + G in Object Mode.\n\n\nExporting to FBX:\nUnity supports .blend files, exporting the model automatically through blender when the .blend file is imported, however:\n\nThis only works if Blender is installed, meaning if someone in your team doesn‚Äôt have blender this won‚Äôt method work\nYou don‚Äôt have controls over the settings when exporting.\n\nTherefore .FBX is recommended!\nSet Export Directions\nSet forward and up directions. You can use the directions gizmo in the top-right corner to easily determine which direction is the front of your object and which is up:\nNow just press Export FBX and bring your model into Unity\nIf Normals appear inside out\n\nMake sure object scale is not negative\nRe-calculate normals (In Edit Mode ‚Üí A ‚Üí Shift+N)\nRe-Export your model\n\nIf Textures don‚Äôt show\n\n\npack textures into blend file (File ‚Üí External Data ‚Üí Pack Resources)\n\n\nwhen exporting, set path mode to copy and tick embed textures:\n\n\n\nextract textures in Unity:\n\n\n\nGood practices within Unity\nCreate an empty parent as a ‚Äúwrapper‚Äù for the imported mesh. This allows you to change the rotation of the mesh without affecting the transform of the parent object:\n\n‚ÄúHorse Mesh‚Äù is the imported model, ‚ÄúHorse‚Äù is an empty parent object."},"2_Blender/0_Core/1_Keybind-List":{"slug":"2_Blender/0_Core/1_Keybind-List","filePath":"2_Blender/0_Core/1_Keybind List.md","title":"Keybind List","links":[],"tags":[],"content":"Navigation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nActionShortcutOrbitMiddle Mouse ButtonPanShift + MMBZoom In/OutScroll or Ctrl + MMBFlyShift + ~\nGeneral\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nActionShortcutAdd ObjectShift + ADeleteX or DeleteMoveG (for Grab)ScaleSRotateRLock to Axis (when moving, scaling, rotating)X/Y/ZSelectLeft Mouse ButtonSelect/Deselect AllADuplicateShift + DDuplicate LinkedAlt + DHideHUnhide AllAlt + HObject/Edit Mode ToggleTab\nObject Mode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nActionShortcutSet Parent (to lastselected)Ctrl + PClear ParentAlt + PToggle SnappingShift + TabClear LocationAlt + GClear RotationAlt + RClear ScaleAlt + SJoin Selected ObjectsCtrl + J\nSelection (Edit Mode)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn 1Column 2Select Edge LoopAlt + LMBSelect Edge RingCtrl + Alt + RMBVertex Select Mode1Edge Select Mode2Face Select Mode3Edge CreaseCtrl + ESelect Connected MeshCtrl + LSelect ConnectedMesh Under CursorLMirror Current SelectionCtrl + Shift + MGrow/Shrink SelectionCtrl + +/-\nModelling (Edit Mode)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn 1Column 2ExtrudeEInsetIBevelCtrl + BBevel VerticesCtrl + Shift + BLoop CutCtrl + RKnifeKFill FaceFShearCtrl + Shift + Alt + SBendShift + WSplitYRipVMergeMProportional Editing ToggleO\nSculpting\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn 1Column 2Brush SelectionShift + SpaceBrush SizeFBrush StrengthShift + FBrush AngleCtrl + FAngle ControlRStroke ControlEMask (box)BMask (brush)MClear MaskAlt + MInvert MaskCtrl + I"},"2_Blender/0_Core/2_Useful-Addons":{"slug":"2_Blender/0_Core/2_Useful-Addons","filePath":"2_Blender/0_Core/2_Useful Addons.md","title":"Useful Addons","links":[],"tags":[],"content":"Addons can be accessed or installed in Edit ‚Üí Preferences‚Ä¶ ‚Üí Addons. Built-in addons are already installed with Blender and can be searched for and enabled in this screen, while others must be installed manually:\nModelling\nLoopTools (Built-In)\nA whole bunch of tools to help with modelling, especially when changing the shape of edge loops. Loops can be shaped into perfect circles, smoothed down, etc.\nAuto Mirror\nAutomatically splits your model in half and applies the Mirror modifier, so it can be perfectly symmetrical on that axis. Great for character modelling.\n3D Printing\n3D Print Toolbox (Built-In)\nBlender can be used to created meshes for 3D printing. Meshes exported from Blender are usually imported into a piece of software takes the mesh and ‚Äúslices‚Äù it into paths that the 3D printer can execute. An example of such Slicer software is PrusaSlicer.\nIn order to correctly slice a mesh, it needs to be ‚Äúwatertight‚Äù, meaning that the surface is closed everywhere. Additionally, there should be no edges or faces sticking out. 3D Print Toolbox helps you analyze problems in your mesh that could cause slicing issues."},"2_Blender/0_Core/3_Useful-Videos":{"slug":"2_Blender/0_Core/3_Useful-Videos","filePath":"2_Blender/0_Core/3_Useful Videos.md","title":"Useful Videos","links":[],"tags":[],"content":"Comprehensive Complete Beginner‚Äôs Guide (YouTube)\nA complete guide like this will take you through making a simple scene and teach the basics of modelling, texturing and shading, but will not teach techniques specific to making game assets.\n\nEverything You Need to Know About Topology (YouTube)\nFocused on character topology recommendations\n"},"2_Blender/0_Core/4_Optimised-Topology":{"slug":"2_Blender/0_Core/4_Optimised-Topology","filePath":"2_Blender/0_Core/4_Optimised Topology.md","title":"Optimised Topology","links":[],"tags":[],"content":"This guide will explain the concept of 3D model topology, why it is important and how to optimise your model for real-time applications such as video games.\nTopology\nThe formal definition of a topology is ‚Äúthe way in which constituent parts are interrelated or arranged‚Äù, in 3D modelling this refers to the way that vertices, edges and faces are connected to create the structure of a model.\n‚ÄùGood‚Äù Topology\nThere is no universal ‚Äúgood‚Äù topology, mainly for the fact that 3D models have a hundred different use-cases.\nIs your model optimised for performance, or is the main goal for it to look detailed and reflect beautifully under ray-traced lights?\n\n\n                  \n                  Good Topology \n                  \n                \n\nA good topology is one that is most functional for your use-case.\nFor the purposes of this guide, our use-case is 3D modelling for video games.\n\n\n\n\n                  \n                  A famous example of a model which was created for CGI and is, hilariously, unfit for use as a video game prop: \n                  \n                \n\n\n\n\n\n\nTopology Considerations\nPoly Count\n\nPerformance Optimization: A well-managed poly count ensures models are efficient and render quickly, especially important in games.\nLevel of Detail (LOD): Proper topology supports LOD systems, allowing lower-poly versions of a model to be exported and used at a distance.\nFile Size and Memory Use: Lower poly counts reduce file size and memory usage, which is essential for mobile platforms and VR.\n\n\n\n                  \n                  Rule of Thumb \n                  \n                \n\nBase the triangle count on the relative size and importance of the asset. Background assets, or assets that will only be seen from a distance, don‚Äôt need to be as detailed.\n\n\nDeformation\n\nSmooth Animation: Good topology, especially with edge loops, ensures clean deformation during animation (e.g., bending elbows or facial expressions).\nWeight Painting and Rigging: Clean topology simplifies skinning and makes weight distribution more predictable and manageable.\nAvoiding Artifacts: Poor topology can cause pinching, stretching, or collapsing geometry during movement.\n\n\n\n                  \n                  For animated characters, I recommend watching this video: \n                  \n                \n\n\n\n\nAppearance\n\nSurface Flow: Topology dictates how light interacts with a surface; smooth edge flow enhances the visual quality of the model.\nSubdivision Ready: Properly laid-out quads subdivide predictably, which is important for high-resolution sculpting or rendering. Tris don‚Äôt subdivide neatly so it is recommend to mostly use quads in Blender, and let the game engine convert to tris.\nUV Mapping and Texturing: Clean topology simplifies unwrapping and improves how textures are applied to the model.\n\n\nReducing Poly Count\nIn Blender, you can easily reduce the poly count of any mesh through the use of the Decimate and Remesh modifiers:\nDecimate Modifier\nUsing the decimate modifier, we can reduce the number of polygons in the mesh.\nHave a look at this lion statue: beautiful, but at the cost of having 1.5M triangles\n\nApplying the decimate modifier with a factor of 0.025 (a 97.5% reduction in complexity), the new model only has 40k triangles:\n\n\nFrom afar, it is difficult to tell the difference between the two - the decimated model is the one on the left. if this was a prop in a game the player would need to be very close to the model to tell the difference. A minimal impact to the gameplay, but a whopping 4000x increase to the performance whenever the model is on the screen."},"2_Blender/0_Core/index":{"slug":"2_Blender/0_Core/index","filePath":"2_Blender/0_Core/index.md","title":"Blender Core","links":[],"tags":[],"content":""},"2_Blender/1_Character-Creation/0_Character-Turnarounds":{"slug":"2_Blender/1_Character-Creation/0_Character-Turnarounds","filePath":"2_Blender/1_Character Creation/0_Character Turnarounds.md","title":"Character Turnarounds","links":[],"tags":[],"content":"Reference Images\nBefore a 3D artist can begin, they require a set of reference images for the characters. These should display:‚Äã\n\nA good representation of the character and any attached objects (clothes, accessories, held items, etc)‚Äã\nShould showcase the character and items from multiple sides‚Äã\nCharacters should be in either A-Pose, or in T-Pose if you expect a large range of arm movement‚Äã\n\nIt is easiest to model characters when no limbs are meet with the main body‚Äã\n\n\nThese reference images are sometimes referred to as ‚ÄúCharacter Turnarounds‚Äù‚Äã\n\nTurnarounds can be used as concept art, but primarily serve a practical purpose‚Äã\nDifferent media have different turnaround requirements. For example, for 2D animation you may find turnarounds of characters in many angles with various poses\n\n\n\n\nPoses\n\n\nOrthographic Perspective\nAvoid perspective in your reference drawings, instead opt for a ‚Äúflat‚Äù orthographic projection‚Äã. Elements which are further from the viewer should not appear smaller than elements which are closer‚Äã.\n\nHeight and Scale\n\nIt‚Äôs can also be a good idea to indicate the height of the character in some way, either by sharing it with the 3d artist directly, embedding it as additional information in the turnaround, or by placing a reference object (such as a doorframe) with a known height‚Äã.\nIt is possible to scale objects within game engines, but keep in mind that many modern game engines use the volume and scale of objects in physics calculations‚Äã\nTherefore, it is good practice to model the character (or any 3D object) such that when the object has a scale of (1.0,1.0,1.0) it matches its real-life counterpart.‚Äã\nNon-Humanoid Characters\nThe process is the same for non-humanoid models so long as you can capture the shape of the character‚Äã:\n\nSplitting the Turnaround\nTo use the turnaround within a 3D-Modelling software such as Blender, we need to split it into individual reference image files‚Äã:\n\nYou can use your favorite image editing software to do this, or by simply taking snippets using ‚ÄúSnipping Tool‚Äù on Windows.‚Äã\nThe character does not need to be perfectly centered in the images, as we will be adjusting the position of the images within Blender.‚Äã"},"2_Blender/1_Character-Creation/1_Setting-Up-Blender":{"slug":"2_Blender/1_Character-Creation/1_Setting-Up-Blender","filePath":"2_Blender/1_Character Creation/1_Setting Up Blender.md","title":"Setting Up Blender for Character Creation","links":[],"tags":[],"content":""},"2_Blender/1_Character-Creation/2_Character-Creation-Tutorials":{"slug":"2_Blender/1_Character-Creation/2_Character-Creation-Tutorials","filePath":"2_Blender/1_Character Creation/2_Character Creation Tutorials.md","title":"Character Creation Resources","links":[],"tags":[],"content":"Character Creation (LinkedIn Learning)\nwww.linkedin.com/learning/blender-2-8-character-creation/create-your-own-3d-characters\nLow-Poly Game Character Creation (YouTube)\nThomas Potter‚Äôs videos on low-poly characters are a great introduction to creating optimised characters that can be easily rigged for games, and these techniques can be adapted into making more detailed models by incorporating sculpting or working with a subdivision modifier.\n\n\n"},"2_Blender/1_Character-Creation/index":{"slug":"2_Blender/1_Character-Creation/index","filePath":"2_Blender/1_Character Creation/index.md","title":"Character Creation","links":[],"tags":[],"content":""},"2_Blender/index":{"slug":"2_Blender/index","filePath":"2_Blender/index.md","title":"Blender Homepage","links":[],"tags":[],"content":"\n‚ÄúAn organized resource for all things Blender‚Äù\n\nWelcome! This folder will act as a small, wiki-like database of information regarding Blender and general 3D modelling, specifically within the context of game design."},"index":{"slug":"index","filePath":"index.md","title":"Welcome!","links":[],"tags":[],"content":"Guides Repository\nOn this page, you will find an ever-evolving repository of guides which will kick-start your technical/creative journey! These guides vary in difficulty, from very basic to more advanced and specific.\nFeel free to explore by viewing the Tech Tree in the top-left corner (you can expand the window by clicking on the square icon), or by using the Explorer on your left. You can always return to this page by clicking on ‚ÄúGuides‚Äù in the top-left corner.\nWho are these guides for?\nEveryone! Even though these guides are primarily intended for students studying under the Capital House umbrella (BA Games Design &amp; Art, BSc Creative Computing, and MSc Creative Technologies), they are free for anyone to view.\nWho writes them?\nNumerous authors consisting of Winchester School of Art staff and student volunteers.\nAll guides are licensed under Creative Commons BY-NC-SA"}}